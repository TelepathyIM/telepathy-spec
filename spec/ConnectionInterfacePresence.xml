<?xml version="1.0" ?>
<node name="/ConnectionInterfacePresence" xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0">
  <tp:copyright>
    Copyright (C) 2005, 2006 Collabora Limited
Copyright (C) 2005, 2006 Nokia Corporation
Copyright (C) 2006 INdT
  </tp:copyright>
  <tp:license>
    This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Connection.Interface.Presence" tp:name-const="CONN_INTERFACE_PRESENCE">
    <method name="AddStatus">
      <arg direction="in" name="status" type="s"/>
      <arg direction="in" name="parms" type="a{sv}"/>
      <tp:docstring>
        Request that a single presence status is published for the user, along
        with any desired parameters. Changes will be indicated by PresenceUpdate
        signals being emitted.

        Parameters:
        status - the string identifier of the desired status
        parms - a dictionary of optional parameter names mapped to their variant-boxed values

        Possible Errors:
        Disconnected, NetworkError, InvalidArgument, NotAvailable, PermissionDenied
      </tp:docstring>
    </method>
    <method name="ClearStatus">
      <tp:docstring>
        Request that all of a user's presence statuses be removed. Be aware
        that this request may simply result in the statuses being replaced by a
        default available status. Changes will be indicated by PresenceUpdate
        signals being emitted.

        Possible Errors:
        Disconnected, NetworkError, PermissionDenied
      </tp:docstring>
    </method>
    <method name="GetStatuses">
      <arg direction="out" type="a{s(ubba{ss})}"/>
      <tp:docstring>
        Get a dictionary of the valid presence statuses for this connection.
        This is only available when online because only some statuses will
        be available on some servers.

        Returns:
        a dictionary of string identifiers mapped to a struct for each status, containing:
        - a type value from one of the values above
        - a boolean to indicate if this status may be set on yourself
        - a boolean to indicate if this is an exclusive status which you may not set alongside any other
        - a dictionary of valid optional string argument names mapped to their types

        Possible Errors:
        Disconnected, NetworkError
      </tp:docstring>
    </method>
    <signal name="PresenceUpdate">
      <arg name="presence" type="a{u(ua{sa{sv}})}"/>
      <tp:docstring>
        This signal should be emitted when your own presence has been changed,
        or the presence of the member of any of the connection's channels has
        been changed, or when the presence requested by RequestPresence is available.

        Parameters:
        a dictionary of contact handles mapped to a struct containing:
        - a UNIX timestamp of the last activity time (in UTC)
        - a dictionary mapping the contact's current status identifiers to:
          a dictionary of optional parameter names mapped to their 
          variant-boxed values
      </tp:docstring>
    </signal>
    <method name="RemoveStatus">
      <arg direction="in" name="status" type="s"/>
      <tp:docstring>
        Request that the given presence status is no longer published for the
        user. Changes will be indicated by PresenceUpdate signals being
        emitted. As with ClearStatus, removing a status may actually result in
        it being replaced by a default available status.

        Parameters:
        status - the string identifier of the status not to publish anymore for the user

        Possible Errors:
        Disconnected, NetworkError, PermissionDenied, InvalidArgument (if the status
        requested is not currently set)
      </tp:docstring>
    </method>
    <method name="RequestPresence">
      <arg direction="in" name="contacts" type="au"/>
      <tp:docstring>
        Request the presence for contacts on this connection. A PresenceUpdate
        signal will be emitted when they are received. This is not the same as
        subscribing to the presence of a contact, which must be done using the
        'subscription' Channel.Type.ContactList, and on some protocols presence
        information may not be available unless a subscription exists.

        Parameters:
        contacts - an array of the contacts whose presence should be obtained

        Possible Errors:
        Disconnected, NetworkError, InvalidHandle, PermissionDenied, NotAvailable (if the presence of the requested contacts is not reported to this connection)
      </tp:docstring>
    </method>
    <method name="SetLastActivityTime">
      <arg direction="in" name="time" type="u"/>
      <tp:docstring>
        Request that the recorded last activity time for the user be updated on
        the server.

        Parameters:
        time - a UNIX timestamp of the user's last activity time (in UTC)

        Possible Errors:
        Disconnected, NetworkError, NotImplemented (this protocol has no concept of idle time)
      </tp:docstring>
    </method>
    <method name="SetStatus">
      <arg direction="in" name="statuses" type="a{sa{sv}}"/>
      <tp:docstring>
        Request that the user's presence be changed to the given statuses and
        desired parameters. Changes will be reflected by PresenceUpdate
        signals being emitted. On certain protocols, this method may be
        called on a newly-created connection which is still in the
        DISCONNECTED state, and will sign on with the requested status.
        If the requested status is not available after signing on,
        NotAvailable will be returned and the connection will remain
        offline, or if the protocol does not support signing on with
        a certain status, Disconnected will be returned.

        Parameters:
        a dictionary of status identifiers mapped to:
            a dictionary of optional parameter names mapped to their variant-boxed values

        Possible Errors:
        Disconnected, NetworkError, InvalidArgument, NotAvailable, PermissionDenied
      </tp:docstring>
    </method>
    <tp:docstring>
      This interface is for services which have a concept of presence which can
    be published for yourself and monitored on your contacts. Telepathy's
    definition of presence is based on that used by the Galago project
    (see http://www.galago-project.org/).

    Presence on an individual (yourself or one of your contacts) is modelled as
    an last activity time along with a set of zero or more statuses, each of
    which may have arbitrary key/value parameters. Valid statuses are defined
    per connection, and a list of them can be obtained with the GetStatuses
    method.

    Each status has an arbitrary string identifier which should have an agreed
    meaning between the connection manager and any client which is expected to
    make use of it. The following well-known values (in common with those in
    Galago) should be used where possible to allow clients to identify common
    choices:
    - available
    - away
    - brb (Be Right Back)
    - busy
    - dnd (Do Not Disturb),
    - xa (Extended Away)
    - hidden (aka Invisible)
    - offline

    As well as these well-known status identifiers, every status also has a
    numerical type value which can be used by the client to classify even
    unknown statuses into different fundamental types:
    1 - CONNECTION_PRESENCE_TYPE_OFFLINE
    2 - CONNECTION_PRESENCE_TYPE_AVAILABLE
    3 - CONNECTION_PRESENCE_TYPE_AWAY
    4 - CONNECTION_PRESENCE_TYPE_EXTENDED_AWAY
    5 - CONNECTION_PRESENCE_TYPE_HIDDEN

    These numerical types exist so that even if a client does not understand
    the string identifier being used, and hence cannot present the presence to
    the user to set on themselves, it may display an approximation of the
    presence if it is set on a contact.

    The dictionary of variant types allows the connection manager to exchange
    further protocol-specific information with the client. It is recommended
    that the string (s) argument 'message' be interpreted as an optional
    message which can be associated with a presence status.

    If the connection has a 'subscribe' contact list, PresenceUpdate signals
    should be emitted to indicate changes of contacts on this list, and should
    also be emitted for changes in your own presence. Depending on the
    protocol, the signal may also be emitted for others such as people with
    whom you are communicating, and any user interface should be updated
    accordingly.

    On some protocols, RequestPresence may only succeed on contacts on your
    'subscribe' list, and other contacts will cause a PermissionDenied error.
    On protocols where there is no 'subscribe' list, and RequestPresence
    succeeds, a client may poll the server intermittently to update any display
    of presence information.
    </tp:docstring>
    <tp:enum typename="ConnectionPresenceType">
      <tp:enumvalue name="CONNECTION_PRESENCE_TYPE_UNSET" value="0"/>
      <tp:enumvalue name="CONNECTION_PRESENCE_TYPE_OFFLINE" value="1"/>
      <tp:enumvalue name="CONNECTION_PRESENCE_TYPE_AVAILABLE" value="2"/>
      <tp:enumvalue name="CONNECTION_PRESENCE_TYPE_AWAY" value="3"/>
      <tp:enumvalue name="CONNECTION_PRESENCE_TYPE_EXTENDED_AWAY" value="4"/>
      <tp:enumvalue name="CONNECTION_PRESENCE_TYPE_HIDDEN" value="5"/>
    </tp:enum>
  </interface>
</node>
<!-- vim:set sw=2 sts=2 et ft=xml: -->
