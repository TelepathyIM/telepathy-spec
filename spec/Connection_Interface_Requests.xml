<?xml version="1.0" ?>
<node name="/Connection_Interface_Requests"
  xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0"
  >
  <tp:copyright>Copyright (C) 2008 Collabora Limited</tp:copyright>
  <tp:copyright>Copyright (C) 2008 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      Lesser General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
      USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.Connection.Interface.Requests.DRAFT"
    tp:causes-havoc="experimental">
    <tp:requires interface="org.freedesktop.Telepathy.Connection"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>An enhanced version of the Telepathy connection interface, which can
        represent bundles of channels that should be dispatched together, and
        does not assume any particular properties by which channels are
        uniquely identifiable.</p>

      <p>New in 0.17.UNRELEASED.</p>
    </tp:docstring>

    <tp:flags name="Channel_Request_Flags" value-prefix="Channel_Request_Flag"
      type="u">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Flags that can be set when requesting channels.</p>

        <tp:rationale>
          <p>There is deliberately no flag corresponding to the
            suppress_handler argument to
            <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.RequestChannel</tp:dbus-ref>,
            because passing a FALSE value for that argument is deprecated.
            Requests made using this interface always behave as though
            suppress_handler was TRUE.</p>
        </tp:rationale>
      </tp:docstring>

      <tp:flag name="Prefer_Reuse" value="1">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The requesting client would prefer to re-use an existing channel
            that meets its requirements, but creating a new channel would
            also be acceptable. The default behaviour is to create a
            new channel or fail if this cannot be done.</p>

          <tp:rationale>
            <p>If only a new channel would be acceptable, clients MUST omit
              this flag. If only an existing channel would be acceptable,
              clients MUST NOT call
              <tp:member-ref>RequestChannels</tp:member-ref> at all.</p>

            <p>We can't think of a sensible use-case for clients that would
              prefer to use a new channel, but will accept an existing one if
              a new one cannot be created. If you have such a client,
              (a) let us know! and (b) you can try to make a new channel
              first, falling back to looking for an existing one in a secondary
              request.</p>
          </tp:rationale>
        </tp:docstring>
      </tp:flag>

    </tp:flags>

    <tp:flags name="Channel_Request_Response_Flags"
      value-prefix="Channel_Request_Response_Flag" type="u">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Flags that channels returned from a request can have.</p>
      </tp:docstring>

      <tp:flag name="Reused" value="1">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The channel already existed before this request (either because
            of a previous request, or because it had already appeared).</p>

          <p>It must be assumed that the channel is already being handled
            by some client, so the requester SHOULD NOT do things with the
            channel which would be inappropriate if another client is handling
            it (notably, acknowledging
            <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Type.Text</tp:dbus-ref>
            messages).</p>
        </tp:docstring>
      </tp:flag>

    </tp:flags>

    <tp:struct name="Channel_Details" array-name="Channel_Details_List">
      <tp:docstring>
        Enough details of a channel that clients can work out how to dispatch
        or handle it.
      </tp:docstring>

      <tp:member name="Channel" type="o">
        <tp:docstring>
          The object path of the channel.
        </tp:docstring>
      </tp:member>

      <tp:member name="Properties" type="a{sv}"
        tp:type="Qualified_Property_Value_Map">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Properties of the channel.</p>

          <p>Connection managers MUST NOT include properties in this mapping
            if their values can change. Clients MUST ignore properties
            that appear in this mapping if their values can change.</p>

          <tp:rationale>
            <p>If properties that could change were included, the following
              race condition would be likely to exist in some cases:</p>

            <ul>
              <li>NewChannels or Get("Channels") includes a property P with
                value V1</li>
              <li>Client creates a proxy object for the channel</li>
              <li>The value of P changes to V2</li>
              <li>Client connects to PChanged signal</li>
              <li>Client should call Get("P") or GetAll here, to avoid the
                race, but client's author has forgotten to do so</li>
              <li>Proxy object thinks P == V1, but actually P == V2</li>
            </ul>

            <p>We've taken the opportunity to make the API encourage the
              client author to get it right. Where possible, we intend that
              properties whose value will be used in channel dispatching
              or other "early" processing will be defined so that they are
              immutable (can never change).</p>
          </tp:rationale>

          <p>Each dictionary MUST contain the keys
            <tp:dbus-ref>org.freedesktop.Telepathy.Channel.ChannelType</tp:dbus-ref>,
            <tp:dbus-ref>org.freedesktop.Telepathy.Channel.TargetHandleType</tp:dbus-ref>
            and <tp:dbus-ref>org.freedesktop.Telepathy.Channel.TargetHandle</tp:dbus-ref>.
          </p>
          <!-- FIXME: maybe also TargetID, Requested, InitiatorHandle,
          InitiatorID once they leave the FUTURE pseudo-interface -->

          <tp:rationale>
            <p>We expect these to be crucial to the channel-dispatching
              process.</p>
          </tp:rationale>
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <tp:struct name="Channel_Request_Response"
      array-name="Channel_Request_Response_List">
      <tp:docstring>
        Enough details of a channel that clients can work out how to dispatch
        or handle it, including flags which are really properties of the
        request rather than properties of the channel.
      </tp:docstring>

      <tp:member name="Channel" type="o">
        <tp:docstring>
          The object path of the channel.
        </tp:docstring>
      </tp:member>

      <tp:member name="Properties" type="a{sv}"
        tp:type="Qualified_Property_Value_Map">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Properties of the channel. All the same comments apply
            as for the equivalent member of
            <tp:type>Channel_Details</tp:type>.</p>
        </tp:docstring>
      </tp:member>

      <tp:member name="Flags" type="u"
        tp:type="Channel_Request_Response_Flags">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Flags indicating how this channel satisfies the request.</p>
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <method name="RequestChannels">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request that channels are created.</p>
      </tp:docstring>

      <arg direction="in" name="Request_Flags" type="u"
        tp:type="Channel_Request_Flags">
        <tp:docstring>
          Flags affecting the connection manager's behaviour while satisfying
          this request.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Requests" type="aa{sv}"
        tp:type="Qualified_Property_Value_Map[]">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Dictionaries containing desirable properties. Some properties
            are defined such that only an exact match makes sense, and
            connection managers MUST NOT satisfy a request with a channel
            where that property does not match; some properties are defined
            such that the connection manager MAY treat the request as merely
            a hint, and make a best-effort attempt to satisfy it. This is
            documented separately for each property.</p>

          <p>If any of these dictionaries contains a property whose semantics
            are not known to the connection manager, this method MUST fail
            without side-effects (in particular it must not create any new
            channels).</p>

          <tp:rationale>
            <p>This is necessary if we want to be able to invent properties
              in future that, when used in a request, are hard requirements
              rather than just hints. A connection manager that did not know
              the semantics of those properties could incorrectly return a
              new channel that did not satisfy the requirements.</p>
          </tp:rationale>

          <p>The connection manager MUST NOT respond successfully,
            and SHOULD NOT create any new channels or cause any other
            side-effects, unless for each request it can produce a
            corresponding channel that satisfies the client's requirements.</p>

          <p>Properties that will be set by this argument need not have write
            access after the channel has been created - indeed, it is
            expected that most will be read-only.</p>
        </tp:docstring>
      </arg>

      <arg name="Channels" direction="out" type="a(oa{sv}u)"
        tp:type="Channel_Request_Response[]">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The channels that were produced. Although the connection manager
            will attempt to satisfy the request, they are not guaranteed to
            match what the client requested exactly; the client is responsible
            for verifying that the returned channels are suitable.</p>

          <p>The output channels MUST be in the same order as the requests.
            If the requests caused additional channels in the same bundle to
            be created as a side-effect, then this array will be longer than
            the array of requests, and the side-effect channels MUST appear
            at the end. Connection managers MUST NOT create channels as a
            side-effect if they are not strictly necessary.</p>

          <tp:rationale>
            <p>For instance, joining an XMPP MUC Tube channel requires joining
              that MUC (chatroom), which may result in the creation of an
              unrequested Text channel; it would be misleading to not create
              the Text channel.</p>
          </tp:rationale>
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            One of the channel requests was one that can never succeed,
            such as requesting an unsupported channel type, or requesting
            a channel type which this connection manager does not support with
            the given target handle type.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle">
          <tp:docstring>
            An invalid handle was requested as the value of a property whose
            value is a handle (like
            <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.TargetHandle</tp:dbus-ref>),
            or a syntactically invalid identifier was requested as the value
            of a property whose value is the string corresponding to a handle
            (like TargetID).
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            One of the requested channels cannot be created, but in
            principle, a similar request might succeed in future. For instance,
            this might be because the requested contact is using a client
            that lacks a particular feature, or because a channel matching the
            request already exists and the protocol requires that only one
            such channel can exist at a time.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.Banned"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.Full"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.InviteOnly"/>
      </tp:possible-errors>
    </method>

    <signal name="NewChannels">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        New channels have been created. The connection manager SHOULD emit
        a single signal for any group of closely related channels that are
        created at the same time, so that the channel dispatcher can try to
        dispatch them to a handler as a unit.
      </tp:docstring>

      <arg name="Channels" type="a(oa{sv})" tp:type="Channel_Details[]">
        <tp:docstring>
          The channels and their details. All channels that are signalled
          together like this MUST have the same Bundle property, which may
          either refer to an existing bundle, or establish a new bundle.
        </tp:docstring>
      </arg>
    </signal>

    <property name="Channels" type="a(oa{sv})" access="read"
      tp:type="Channel_Details[]">
      <tp:docstring>
        A list of all the channels which currently exist on this connection.
        Change notification is via the NewChannels and ChannelsClosed signals.
      </tp:docstring>
    </property>

    <signal name="ChannelsClosed">
      <tp:docstring>
        Emitted when channels are closed and hence disappear from the
        Channels property.

        <tp:rationale>
          This is redundant with the Close signal on the channel itself, but
          it does provide full change notification for the Channels property.
        </tp:rationale>
      </tp:docstring>

      <arg name="Removed" type="ao">
        <tp:docstring>
          The channels which have been removed from the Channels property
        </tp:docstring>
      </arg>
    </signal>

    <tp:mapping name="Property_Restriction_Map">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        A mapping indicating which values of some properties are allowed.

        <tp:rationale>
          <p>This mapping doesn't specify the type of each property.
            This is intentional - if a client doesn't know the documented
            D-Bus type of a property, it shouldn't try to set that property
            to any particular value!</p>
        </tp:rationale>
      </tp:docstring>

      <tp:member name="Property" type="s" tp:type="DBus_Qualified_Member">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The interface and name of the property.</p>
        </tp:docstring>
      </tp:member>

      <tp:member name="Restriction" type="v">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Something expressing what restriction is placed on values of
            this property. Possible types and values are documented as part
            of the property's specification.</p>

          <tp:rationale>
            <p>This way, the restriction can be made as simple as possible
              on a per-property basis. Typical representations might include
              an array [value1, value2, value3] if only certain values of
              a string or enumeration are allowed, or a structure (min, max)
              if a range of integer or float values are allowed.</p>
          </tp:rationale>

          <p>As a special case, if the value of this property is a non-empty
            array of variants (signature av), then each variant in that array
            represents a restriction as documented for the property,
            and the value given must satisfy at least one of those
            restrictions (i.e. an "or" operation).</p>

          <tp:rationale>
            <p>This is mainly so that if the format of restrictions changes,
              we can be backwards-compatible. For instance, if a property's
              recommended format for restrictions changes from a bitfield
              to a more elaborate data structure, we'll still want to support
              clients that can only understand restrictions expressed as
              a bitfield.</p>
          </tp:rationale>

          <p>As another special case, if the value of this property is an
            empty array of variants (signature av), the restriction
            is "there is no restriction" (any value that is valid according
            to the property's documentation will do).</p>

          <tp:rationale>
            <p>It is expected that most properties will be able to take
              arbitrary or nearly-arbitrary values - for instance, nicknames
              in chatrooms, service names in Tubes, or even passwords - so
              it is useful to define a common representation for this.</p>

            <p>If an empty array wasn't further special-cased, it would have
              to mean "there is no acceptable value", which makes no
              sense - if a channel class is not requestable, just don't
              advertise it at all! This means we can usefully repurpose
              an empty 'av' to mean something else.</p>
          </tp:rationale>

          <p>If the property's specification does not mention any particular
            semantics for the variant in Property_Restriction_Map, then an
            empty 'av' is the only reasonable value.</p>

          <p>Clients MUST interpret restrictions of an unrecognised D-Bus type
            as something they cannot possibly comply with; if there is no
            alternative restriction in an 'av', that will mean that the
            client will never request channels of the relevant class.</p>
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <tp:struct name="Channel_Class" array-name="Channel_Class_List">
      <tp:docstring>
        Structure representing a class of channels that can be requested,
        identified by a pair (channel type, handle type). Connection managers
        SHOULD NOT support more than one channel class with the same
        channel type and handle type; if they do, clients SHOULD recover
        by ignoring the second and subsequent channel classes.

        <tp:rationale>
          I can't think of any good way to represent it in a UI otherwise.
        </tp:rationale>
      </tp:docstring>

      <tp:member name="Channel_Type" type="s" tp:type="DBus_Interface">
        <tp:docstring>
          The channel type to be requested (a value for the
          Channel.ChannelType property)
        </tp:docstring>
      </tp:member>

      <tp:member name="Handle_Type" type="u" tp:type="Handle_Type">
        <tp:docstring>
          The handle type (a value for the Channel.TargetHandleType property)
        </tp:docstring>
      </tp:member>

      <tp:member name="Required_Properties" type="a{sv}"
        tp:type="Property_Restriction_Map">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Properties that must be set when requesting a channel of this
            channel type and handle type.</p>

          <tp:rationale>
            <p>Outgoing file transfers need at least a size, and perhaps other
              properties depending on the protocol (e.g. suggested filename,
              MD5 or other checksum).</p>
          </tp:rationale>

          <p>(FIXME: need to do something clever with TargetHandle and
            TargetID)</p>

          <p>Properties in this array MAY have additional semantics.
            For instance, if a property P1 is documented as "if P1 takes
            values A, B or C, then P2 must also be given", and a connection
            manager requires P1, then this should be represented by placing
            P1 in Required_Properties and P2 in Properties; clients are
            expected to understand the documented relationship between the
            properties.</p>

          <p>Clients that do not understand the semantics of all the
            properties in this list MUST NOT request channels of this
            class unless they are intended to be generic debugging/development
            tools.</p>
        </tp:docstring>
      </tp:member>

      <tp:member name="Properties" type="a{sv}"
        tp:type="Property_Restriction_Map">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Properties that may be set when requesting a
            channel of this channel type and handle type.</p>

          <p>Properties mentioned in Required_Properties SHOULD NOT appear
            in this array, and neither should the following properties which
            are dealt with elsewhere: ChannelType, TargetHandleType,
            TargetHandle, TargetID.</p>

          <p>If this array contains the Channel.Bundle property, then this
            class of channel can be combined with other channels with that
            property in a request, or added to an existing bundle. If not,
            this signifies that the connection manager is unable to mark
            channels of this class as part of a bundle - this means that
            to the remote contact they are likely to be indistinguishable
            from channels requested separately.</p>
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <property name="RequestableChannelClasses" access="read"
      type="a(sua{sv}a{sv})" tp:type="Channel_Class[]">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The classes of channel that are expected to be available on this
          connection, i.e. those for which RequestChannels can reasonably
          be expected to succeed. User interfaces can use this information
          to show or hide UI components.</p>

        <p>This property cannot change after the connection has gone to
          state Connection_Status_Connected, so there is no change
          notification (if the connection has context-dependent capabilities,
          it SHOULD advertise support for all classes of channel that it might
          support during its lifetime). Before this state has been reached,
          the value of this property is undefined.</p>

        <tp:rationale>
          <p>This is not on an optional interface, because connection
            managers can always offer some sort of clue about the channel
            classes they expect to support (at worst, they can announce
            support for everything for which they have code).</p>
        </tp:rationale>
      </tp:docstring>
    </property>

  </interface>
</node>
<!-- vim:set sw=2 sts=2 et ft=xml: -->
