<?xml version="1.0" ?>
<node name="/Connection_Interface_Avatars1" xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0">
  <tp:copyright>Copyright (C) 2005-2008 Collabora Limited</tp:copyright>
  <tp:copyright>Copyright (C) 2005-2008 Nokia Corporation</tp:copyright>
  <tp:copyright>Copyright (C) 2006 INdT</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="im.telepathy1.Connection.Interface.Avatars1">
    <tp:requires interface="im.telepathy1.Connection"/>

    <tp:client-interest>
      <tp:docstring>
        <p>Clients wanting to get up to date avatars SHOULD claim its interest in
        this interface using <tp:dbus-ref namespace="imt1.Connection"
          >AddClientInterest</tp:dbus-ref>.</p>

        <p>When at least one client claimed interest in avatars, the Connection
          Manager MUST request avatars missing from its disk cache, but only
          if the Connection Manager has a useful token to lookup into its cache
          first.</p>
        <tp:rationale>
          Offline XMPP contacts does not send their avatar token, so the
          Connection Manager would have to request the avatar image even if the
          image could already be in cache.
        </tp:rationale>
      </tp:docstring>
    </tp:client-interest>

    <tp:simple-type name="Avatar_URI" type="s">
      <tp:docstring>
        <p>The URI of the cached image data, or empty if the contact has no
        avatar.</p>

        <p>When not empty, the URI MUST be starting with <em>file:///</em> as
        defined by RFC 1738.</p>

        <tp:rationale>
          <p>Rationale for not just using filenames: on Unix systems, local
          filenames are arbitrary byte sequences which are not necessarily
          UTF-8, or even any consistent encoding at all.</p>
          <p>Rationale for <em>file:///</em>: If we allowed other URI schemes
          (such as HTTP) we'd have to specify which schemes clients were
          expected to support, and for decent performance those clients would
          have to do their own caching anyway.</p>
        </tp:rationale>
      </tp:docstring>
    </tp:simple-type>

    <tp:mapping name="Avatar_URI_Map">
      <tp:docstring>
        Mapping signalled by <tp:member-ref>AvatarsUpdated</tp:member-ref>,
        indicating the avatar of a number of contacts has changed.
      </tp:docstring>
      <tp:member type="u" tp:type="Contact_Handle" name="Contact">
        <tp:docstring>
          A contact
        </tp:docstring>
      </tp:member>
      <tp:member type="s" tp:type="Avatar_URI" name="avatar">
        <tp:docstring>
          The contact's avatar URI
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <tp:contact-attribute name="avatar" type="s" tp:type="Avatar_URI">
      <tp:docstring>
        <p>URI of cached avatar image if the known by the Connection Manager.
        An empty string if the Connection Manager knows that the contact has no
        avatar set.</p>

        <p>If the avatar image is not known, this attribute is omited.
        This happens if the client did not claimed interest in this interface,
        or if the Connection Manager did not yet receive the missing image but
        started the request. In that later case,
        <tp:member-ref>AvatarsUpdated</tp:member-ref> will be emitted once the
        avatar is retrieved.</p>
      </tp:docstring>
    </tp:contact-attribute>

    <signal name="AvatarsUpdated" tp:name-for-bindings="Avatars_Updated">
      <arg name="Avatars" type="a{us}" tp:type="Avatar_URI_Map">
        <tp:docstring>
          A dictionary of contact handles mapped to their avatar URI.
        </tp:docstring>
      </arg>
      <tp:docstring>
        This signal should be emitted when any contact's avatar changed.
      </tp:docstring>
    </signal>

    <method name="RefreshAvatars" tp:name-for-bindings="Refresh_Avatars">
      <arg direction="in" name="Contacts" type="au" tp:type="Contact_Handle[]">
        <tp:docstring>
          The contacts to retrieve avatars for
        </tp:docstring>
      </arg>
      <tp:docstring>
        <p>Refresh avatars for a number of contacts.</p>

        <p><tp:member-ref>AvatarsUpdated</tp:member-ref> signal is emitted when
        avatars are retrieved, if it changed. It is not mandatory to wait for
        all avatars to be retrieved before emitting this signal, avatars could
        be signaled in multiple batches, or even for each contact separately.
        </p>

        <p>If the handles are valid but retrieving an
        avatar fails (for any reason, including the contact not having an
        avatar) signal is not emitted for that contact.</p>

        <p>This MAY be called by clients wanting to get the avatar image when
        <tp:token-ref>avatar</tp:token-ref> as been omited from the
        contact attributes.</p>
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="im.telepathy1.Error.Disconnected"/>
        <tp:error name="im.telepathy1.Error.InvalidHandle"/>
      </tp:possible-errors>
    </method>

    <method name="SetAvatar" tp:name-for-bindings="Set_Avatar">
      <arg direction="in" name="Avatar" type="ay">
        <tp:docstring>
          An array of bytes representing the avatar image data
        </tp:docstring>
      </arg>
      <arg direction="in" name="MIME_Type" type="s">
        <tp:docstring>
          A string representing the image MIME type
        </tp:docstring>
      </arg>
      <tp:docstring>
        Set a new avatar image for this connection. The avatar image must
        respect the requirements obtained by the properties on this
        interface.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="im.telepathy1.Error.Disconnected"/>
        <tp:error name="im.telepathy1.Error.NetworkError"/>
        <tp:error name="im.telepathy1.Error.InvalidArgument"/>
        <tp:error name="im.telepathy1.Error.PermissionDenied"/>
        <tp:error name="im.telepathy1.Error.NotAvailable"/>
      </tp:possible-errors>
    </method>

    <method name="ClearAvatar" tp:name-for-bindings="Clear_Avatar">
      <tp:added version="0.15.0" />
      <tp:docstring>
        Remove the avatar image for this connection.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="im.telepathy1.Error.Disconnected"/>
        <tp:error name="im.telepathy1.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <property name="AvatarPersists"
      tp:name-for-bindings="Avatar_Persists"
      type="b" access="read" tp:immutable="yes">
      <tp:added version="0.UNRELEASED"/>
      <tp:docstring>
        Whether or not the server stores the self contact's avatar.
        <tp:rationale>
          <p>Mission Control needs to know if the avatar must be re-set on the
          Connection each time the account goes online.</p>
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="SupportedAvatarMIMETypes"
      tp:name-for-bindings="Supported_Avatar_MIME_Types"
      type="as" access="read" tp:immutable="yes">
      <tp:added version="0.17.22"/>
      <tp:docstring>
        An array of supported MIME types (e.g. "image/jpeg").
        Clients MAY assume that the first type in this array is preferred.
        This property cannot change after the Connection goes to the Connected
        state.
      </tp:docstring>
    </property>

    <property name="MinimumAvatarHeight"
      tp:name-for-bindings="Minimum_Avatar_Height"
      type="u" access="read" tp:immutable="yes">
      <tp:added version="0.17.22"/>
      <tp:docstring>
        The minimum height in pixels of an avatar on this protocol, which MAY
        be 0.
        This property cannot change after the Connection goes to the Connected
        state.
      </tp:docstring>
    </property>

    <property name="MinimumAvatarWidth"
      tp:name-for-bindings="Minimum_Avatar_Width"
      type="u" access="read" tp:immutable="yes">
      <tp:added version="0.17.22"/>
      <tp:docstring>
        The minimum width in pixels of an avatar on this protocol, which MAY
        be 0.
        This property cannot change after the Connection goes to the Connected
        state.
      </tp:docstring>
    </property>

    <property name="RecommendedAvatarHeight"
      tp:name-for-bindings="Recommended_Avatar_Height"
      type="u" access="read" tp:immutable="yes">
      <tp:added version="0.17.22"/>
      <tp:docstring>
        The recommended height in pixels of an avatar on this protocol, or 0 if
        there is no preferred height.
        This property cannot change after the Connection goes to the Connected
        state.

        <tp:rationale>
          In XMPP a recommended width is given by the protocol specification;
          in proprietary protocols, using the same avatar size as the
          proprietary client is likely to lead to the best display to other
          users.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="RecommendedAvatarWidth"
      tp:name-for-bindings="Recommended_Avatar_Width"
      type="u" access="read" tp:immutable="yes">
      <tp:added version="0.17.22"/>
      <tp:docstring>
        The recommended width in pixels of an avatar on this protocol, or 0 if
        there is no preferred width.
        This property cannot change after the Connection goes to the Connected
        state.

        <tp:rationale>
          The rationale is the same as for
          <tp:member-ref>RecommendedAvatarHeight</tp:member-ref>.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="MaximumAvatarHeight"
      tp:name-for-bindings="Maximum_Avatar_Height"
      type="u" access="read" tp:immutable="yes">
      <tp:added version="0.17.22"/>
      <tp:docstring>
        The maximum height in pixels of an avatar on this protocol, or 0 if
        there is no limit.
        This property cannot change after the Connection goes to the Connected
        state.
      </tp:docstring>
    </property>

    <property name="MaximumAvatarWidth"
      tp:name-for-bindings="Maximum_Avatar_Width"
      type="u" access="read" tp:immutable="yes">
      <tp:added version="0.17.22"/>
      <tp:docstring>
        The maximum width in pixels of an avatar on this protocol, or 0 if
        there is no limit.
        This property cannot change after the Connection goes to the Connected
        state.
      </tp:docstring>
    </property>

    <property name="MaximumAvatarBytes"
      tp:name-for-bindings="Maximum_Avatar_Bytes"
      type="u" access="read" tp:immutable="yes">
      <tp:added version="0.17.22"/>
      <tp:docstring>
        The maximum size in bytes of an avatar on this protocol, or 0 if
        there is no limit.
        This property cannot change after the Connection goes to the Connected
        state.
      </tp:docstring>
    </property>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>An interface for requesting avatars for contacts on a given connection,
      receiving notification when avatars are changed, and publishing your own
      avatar.</p>

      <p>Connection Managers SHOULD store avatar images on disk in
      <em>XDG_CACHE_HOME</em>/telepathy/avatars/<em>cm</em> where <em>cm</em>
      is choosen by the Connection Manager in a way that an avatar
      update always result in a different URI. For example using the image
      sha1 is a good idea, but not using the contact's ID.</p>

      <p>Example 1: on XMPP with XEP-0084 (PEP avatars) or XEP-0153
      (vCard avatars), avatars are announced by their SHA-1, so CM
      implementations could base their filenames in the cache on that SHA-1.
      Similarly, in AIM/ICQ, avatars are announced by their MD5.</p>

      <p>Example 2: in protocols where a change to a contact's avatar is
      announced by a "last updated" timestamp, CM implementations could base
      their filenames in the cache on the pair (contact ID, timestamp).</p>

      <p>For each avatar for which the MIME type is known, Connection Manager
      MUST store that in the file with the same name + ".mime"</p>

      <p>If an avatar is missing from the cache, Connection Manager will only
      request it from server if at least one client claimed interest in this
      interface. However the self contact's avatar will always be requested even
      if no client explicitely claimed its interest.</p>

      <p>The avatar cache is maintained by the Connection Manager. It is its
      responsability to eventually remove outdated avatars from the storage.</p>

      <p>Clients can then get the URI of the avatar using the
      <tp:token-ref>avatar</tp:token-ref> contact attribute, and listening
      to the <tp:member-ref>AvatarsUpdated</tp:member-ref> signal for change
      notification.</p>

      <p>To remove the published avatar on protocols which have persistent
      avatars, a client should use the
      <tp:member-ref>ClearAvatar</tp:member-ref> method. This method can
      safely be used even if there is no avatar for this connection.</p>
    </tp:docstring>
  </interface>
</node>
<!-- vim:set sw=2 sts=2 et ft=xml: -->
