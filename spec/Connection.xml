<?xml version="1.0" ?>
<node name="/Connection" xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0">
  <tp:copyright>
    Copyright (C) 2005, 2006 Collabora Limited
Copyright (C) 2005, 2006 Nokia Corporation
Copyright (C) 2006 INdT
  </tp:copyright>
  <tp:license>
    This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Connection" tp:name-const="CONN_INTERFACE">
    <method name="Connect">
      <tp:docstring>
        Request that the connection be established. This will be done
        asynchronously and errors will be returned by emitting StatusChanged
        signals.

        Potential Errors:
        NotAvailable (the connection is already connecting or connected)
      </tp:docstring>
    </method>
    <method name="Disconnect">
      <tp:docstring>
        Request that the connection be closed. This closes the connection if
        it's not already in DISCONNECTED state, and destroys the connection
        object.
      </tp:docstring>
    </method>
    <method name="GetInterfaces">
      <arg direction="out" type="as"/>
      <tp:docstring>
        Get the optional interfaces supported by this connection.

        Returns:
        an array of D-Bus interface names
      </tp:docstring>
    </method>
    <method name="GetProtocol">
      <arg direction="out" type="s"/>
      <tp:docstring>
        Get the protocol this connection is using.

        Returns:
        a string identifier for the protocol
      </tp:docstring>
    </method>
    <method name="GetSelfHandle">
      <arg direction="out" type="u"/>
      <tp:docstring>
        Get the handle which represents the user on this connection, which will
        remain valid for the lifetime of this connection or until the user's
        identifier changes. This is always a CONTACT type handle.

        Returns:
        an integer handle representing the user

        Potential Errors:
        Disconnected
      </tp:docstring>
    </method>
    <method name="GetStatus">
      <arg direction="out" type="u"/>
      <tp:docstring>
        Get the current status as defined in the StatusChanged signal.

        Returns:
        an integer representing the current status
      </tp:docstring>
    </method>
    <method name="HoldHandles">
      <arg direction="in" name="handle_type" type="u"/>
      <arg direction="in" name="handles" type="au"/>
      <tp:docstring>
        Notify the connection manger that your client is holding a copy
        of handles which may not be in use in any existing channel or
        list, and were not obtained by using the RequestHandles method. For
        example, a handle observed in an emitted signal, or displayed
        somewhere in the UI that is not associated with a channel. The
        connection manager must not deallocate a handle where any clients
        have used this method to indicate it is in use until the ReleaseHandle
        method is called, or the clients disappear from the bus.

        Parameters:
        handle_type - an integer handle type (as defined in RequestHandle)
        handle - a array of integer handles to hold

        Potential Errors:
        Disconnected, InvalidArgument (the handle type is invalid),
        InvalidHandle (the given handle is not valid)
      </tp:docstring>
    </method>
    <method name="InspectHandles">
      <arg direction="in" name="handle_type" type="u"/>
      <arg direction="in" name="handles" type="au"/>
      <arg direction="out" type="as"/>
      <tp:docstring>
        Return a string representation for a number of handles of a given
        type.

        Parameters:
        handle_type - an integer handle type (as defined in RequestHandles)
        handles - an array of integer handles of this type

        Returns:
        an array of handle names in the same order as the given numbers

        Potential Errors:
        Disconnected, InvalidArgument (the given type is not valid),
        InvalidHandle (a given handle is not valid on this connection)
      </tp:docstring>
    </method>
    <method name="ListChannels">
      <arg direction="out" type="a(osuu)"/>
      <tp:docstring>
        List all the channels which currently exist on this connection.

        Returns:
        an array of structs containing:
            a D-Bus object path for the channel object on this service
            a D-Bus interface name representing the channel type
            an integer representing the handle type this channel communicates with, or zero
            an integer handle representing the contact, room or list this channel communicates with, or zero

        Potential Errors:
        Disconnected
      </tp:docstring>
    </method>
    <signal name="NewChannel">
      <arg name="object_path" type="o"/>
      <arg name="channel_type" type="s"/>
      <arg name="handle_type" type="u"/>
      <arg name="handle" type="u"/>
      <arg name="suppress_handler" type="b"/>
      <tp:docstring>
        Emitted when a new Channel object is created, either through user
        request or incoming information from the service. The suppress_handler
        boolean indicates if the channel was requested by an existing client,
        or is an incoming communication and needs to have a handler launched.

        Parameters:
        object_path - a D-Bus object path for the channel object on this service
        channel_type - a D-Bus interface name representing the channel type
        handle_type - an integer representing the type of handle this channel communicates with, which is zero if no handle is specified
        handle - a handle indicating the specific contact, room or list this channel communicates with, or zero if it is an anonymous channel
        suppress_handler - a boolean indicating that the channel was requested by a client that intends to display it to the user, so no handler needs to be launched
      </tp:docstring>
    </signal>
    <method name="ReleaseHandles">
      <arg direction="in" name="handle_type" type="u"/>
      <arg direction="in" name="handles" type="au"/>
      <tp:docstring>
        Explicitly notify the connection manager that your client is no
        longer holding any references to the given handles, and that they
        may be deallocated if they are not held by any other clients or
        referenced by any existing channels.

        Parameters:
        handle_type - an integer handle type (as defined in RequestHandle)
        handle - an array of integer handles being held by the client

        Potential Errors:
        Disconnected, InvalidArgument (the given handle type is invalid),
        InvalidHandle (the given handle is not valid), NotAvailable (the given
        handle is not held by this client)
      </tp:docstring>
    </method>
    <method name="RequestChannel">
      <arg direction="in" name="type" type="s"/>
      <arg direction="in" name="handle_type" type="u"/>
      <arg direction="in" name="handle" type="u"/>
      <arg direction="in" name="suppress_handler" type="b"/>
      <arg direction="out" type="o"/>
      <tp:docstring>
        Request a channel satisfying the specified type and communicating with
        the contact, room or list indicated by the given handle. The handle may
        be zero to request the creation of a new, empty channel, which may or
        may not be available depending on the protocol and channel type. May
        return an existing channel object, create a new channel, or fail if the
        request cannot be satisfied.

        Parameters:
        type - a D-Bus interface name representing base channel type
        handle_type - an integer representing the handle type, or zero if no handle is being specified
        handle - an integer handle representing a contact, room or list, or zero
        suppress_handler - a boolean indicating that the requesting client intends to take responsibility for displaying the channel to the user, so that no other handler needs to be launched

        Returns:
        the D-Bus object path for the channel created or retrieved

        Possible Errors:
        Disconnected, NetworkError, NotImplemented (unknown channel type),
        InvalidHandle (the given handle does not exist or cannot be created),
        NotAvailable (the requested channel type cannot be created with the given handle),
        Channel.Banned, Channel.Full, Channel.InviteOnly
      </tp:docstring>
    </method>
    <tp:enum name="ConnectionHandleType">
      <tp:enumvalue name="CONNECTION_HANDLE_TYPE_NONE" value="0"/>
      <tp:enumvalue name="CONNECTION_HANDLE_TYPE_CONTACT" value="1"/>
      <tp:enumvalue name="CONNECTION_HANDLE_TYPE_ROOM" value="2"/>
      <tp:enumvalue name="CONNECTION_HANDLE_TYPE_LIST" value="3"/>
      <tp:enumvalue name="CONNECTION_HANDLE_TYPE_GROUP" value="4"/>
    </tp:enum>
    <method name="RequestHandles">
      <arg direction="in" name="handle_type" type="u"/>
      <arg direction="in" name="names" type="as"/>
      <arg direction="out" type="au"/>
      <tp:docstring>
        Request several handles from the connection manager which represent a
        number of contacts, rooms or server-stored lists on the service. The
        connection manager should record that these handles are in use by the
        client who invokes this method, and must not deallocate the handles
        until the client disconnects from the bus or calls the ReleaseHandle
        method. Where the name refers to an entity that already has a handle
        in this connection manager, this handle should be returned instead.
        The handle number 0 must not be returned by the connection manager.

        The type value may be one of the following:
        0 - CONNECTION_HANDLE_TYPE_NONE
        1 - CONNECTION_HANDLE_TYPE_CONTACT
        2 - CONNECTION_HANDLE_TYPE_ROOM
        3 - CONNECTION_HANDLE_TYPE_LIST
        4 - CONNECTION_HANDLE_TYPE_GROUP

        Parameters:
        handle_type - an integer handle type (as defined in RequestHandle)
        name - an array of names of entities to request handles for

        Returns:
        an array of integer handle numbers in the same order as given strings

        Potential Errors:
        Disconnected, InvalidArgument (the given type is not valid), NotAvailable (the given name is not a valid entity of the given type)
      </tp:docstring>
    </method>
    <tp:enum name="ConnectionStatus">
      <tp:enumvalue name="CONNECTION_STATUS_CONNECTED" value="0"/>
      <tp:enumvalue name="CONNECTION_STATUS_CONNECTING" value="1"/>
      <tp:enumvalue name="CONNECTION_STATUS_DISCONNECTED" value="2"/>
    </tp:enum>
    <tp:enum name="ConnectionStatusReason">
      <tp:enumvalue name="CONNECTION_STATUS_REASON_NONE_SPECIFIED" value="0"/>
      <tp:enumvalue name="CONNECTION_STATUS_REASON_REQUESTED" value="1"/>
      <tp:enumvalue name="CONNECTION_STATUS_REASON_NETWORK_ERROR" value="2"/>
      <tp:enumvalue name="CONNECTION_STATUS_REASON_AUTHENTICATION_FAILED" value="3"/>
      <tp:enumvalue name="CONNECTION_STATUS_REASON_ENCRYPTION_ERROR" value="4"/>
      <tp:enumvalue name="CONNECTION_STATUS_REASON_NAME_IN_USE" value="5"/>
      <tp:enumvalue name="CONNECTION_STATUS_REASON_CERT_NOT_PROVIDED" value="6"/>
      <tp:enumvalue name="CONNECTION_STATUS_REASON_CERT_UNTRUSTED" value="7"/>
      <tp:enumvalue name="CONNECTION_STATUS_REASON_CERT_EXPIRED" value="8"/>
      <tp:enumvalue name="CONNECTION_STATUS_REASON_CERT_NOT_ACTIVATED" value="9"/>
      <tp:enumvalue name="CONNECTION_STATUS_REASON_CERT_HOSTNAME_MISMATCH" value="10"/>
      <tp:enumvalue name="CONNECTION_STATUS_REASON_CERT_FINGERPRINT_MISMATCH" value="11"/>
      <tp:enumvalue name="CONNECTION_STATUS_REASON_CERT_SELF_SIGNED" value="12"/>
      <tp:enumvalue name="CONNECTION_STATUS_REASON_CERT_OTHER_ERROR" value="13"/>
    </tp:enum>
    <signal name="StatusChanged">
      <arg name="status" type="u"/>
      <arg name="reason" type="u"/>
      <tp:docstring>
        Emitted when the status of the connection changes.  All states and
        reasons have numerical values, as defined here:

        0 - CONNECTION_STATUS_CONNECTED
            The connection is alive and all methods are available.

        1 - CONNECTION_STATUS_CONNECTING
            The connection has not yet been established, or has been
            severed and reconnection is being attempted. Some methods may fail
            until the connection has been established.

        2 - CONNECTION_STATUS_DISCONNECTED
            The connection has been severed and no method calls are
            valid. The object may be removed from the bus at any time.

        The reason should be one of the following:

        0 - CONNECTION_STATUS_REASON_NONE_SPECIFIED
            There is no reason set for this state change.

        1 - CONNECTION_STATUS_REASON_REQUESTED
            The change is in response to a user request.

        2 - CONNECTION_STATUS_REASON_NETWORK_ERROR
            There was an error sending or receiving on the network socket.

        3 - CONNECTION_STATUS_REASON_AUTHENTICATION_FAILED
            The username or password was invalid.

        4 - CONNECTION_STATUS_REASON_ENCRYPTION_ERROR
            There was an error negotiating SSL on this connection, or
            encryption was unavailable and require-encryption was set when the
            connection was created.

        5 - CONNECTION_STATUS_REASON_NAME_IN_USE
            Someone is already connected to the server using the name
            you are trying to connect with.

        6 - CONNECTION_STATUS_REASON_CERT_NOT_PROVIDED
            The server did not provide a SSL certificate.

        7 - CONNECTION_STATUS_REASON_CERT_UNTRUSTED
            The server's SSL certificate could not be trusted.

        8 - CONNECTION_STATUS_REASON_CERT_EXPIRED
            The server's SSL certificate has expired.

        9 - CONNECTION_STATUS_REASON_CERT_NOT_ACTIVATED
            The server's SSL certificate is not yet valid.

        10 - CONNECTION_STATUS_REASON_CERT_HOSTNAME_MISMATCH
            The server's SSL certificate did not match its hostname.

        11 - CONNECTION_STATUS_REASON_CERT_FINGERPRINT_MISMATCH
            The server's SSL certificate does not have the expected
            fingerprint.

        12 - CONNECTION_STATUS_REASON_CERT_SELF_SIGNED
            The server's SSL certificate is self-signed.

        13 - CONNECTION_STATUS_REASON_CERT_OTHER_ERROR
            There was some other error validating the server's SSL certificate.

        Parameters:
        status - an integer indicating the new status
        reason - an integer indicating the reason for the status change
      </tp:docstring>
    </signal>
    <tp:docstring>
      This models a connection to a single user account on a communication
    service. Its basic capability is to provide the facility to request and
    receive channels of differing types (such as text channels or streaming
    media channels) which are used to carry out further communication.

    As well as the methods and signatures below, arbitrary interfaces may be
    provided by the Connection object to represent extra connection-wide
    functionality, such as the Connection.Interface.Presence for receiving and
    reporting presence information, and Connection.Interface.Aliasing for
    connections where contacts may set and change an alias for themselves.
    These interfaces can be discovered using GetInterfaces after the
    connection, has been established and must not change subsequently at
    runtime.

    Contacts, rooms, and server-stored lists (such as subscribed contacts,
    block lists, or allow lists) on a service are all represented by
    immutable handles, which are unsigned non-zero integers which are valid
    only for the lifetime of the connection object, and are used throughout the
    protocol where these entities are represented, allowing simple testing of
    equality within clients. Handles have per-type uniqueness, meaning that
    every (handle type, handle number) tuple is guaranteed to be unique within
    a connection and that a handle alone (without its type) is meaningless or
    ambiguous. Connection manager implementations should reference count these
    handles to determine if they are in use either by any active clients or any
    open channels, and may deallocate them when this ceases to be true. Clients
    may request handles of a given type and name with the RequestHandles
    method, inspect the entity name of handles with the InspectHandles method,
    keep handles from being released with HoldHandles, and notify that they are
    no longer storing handles with ReleaseHandles.
    </tp:docstring>
  </interface>
</node>
<!-- vim:set sw=2 sts=2 et ft=xml: -->
