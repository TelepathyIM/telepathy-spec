<?xml version="1.0" ?>
<node name="/Channel_Dispatch"
  xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0">
  <tp:copyright>Copyright (C) 2008 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright (C) 2008 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
<p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.ChannelDispatch.DRAFT"
    tp:causes-havoc="experimental">
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>A channel dispatch is an object in the Channel Dispatcher
        representing a bundle of channels being announced to client
        processes.</p>
    </tp:docstring>

    <property name="Interfaces" type="as" access="read"
      tp:type="DBus_Interface[]">
      <tp:docstring>
        A list of the extra interfaces provided by this channel dispatch
        operation.
      </tp:docstring>
    </property>

    <method name="Reject">
      <tp:docstring>
        Called by an approver to reject a channel bundle. The channel
        dispatcher should close the channels. If successful, this method
        will cause the ChannelDispatch object to disappear, causing the
        ChannelDispatcher to emit DispatchCompleted.
        However, this method may fail because the dispatch has already been
        completed and the object has already gone.
      </tp:docstring>

      <tp:possible-errors>
        <!-- FIXME -->
      </tp:possible-errors>
    </method>

    <method name="HandleWith">
      <tp:docstring>
        Called by an approver to accept a channel bundle and request that
        the given handler be used to handle it. If successful, this method
        will cause the ChannelDispatch object to disappear, causing the
        ChannelDispatcher to emit DispatchCompleted.
        However, this method may fail because the dispatch has already been
        completed and the object has already gone.
      </tp:docstring>

      <arg direction="in" type="s" tp:type="DBus_Bus_Name" name="Handler">
      </arg>

      <tp:possible-errors>
        <!-- FIXME -->
      </tp:possible-errors>
    </method>

    <method name="Claim">
      <tp:docstring>
        Called by an approver to accept a channel bundle and request that
        the approver be allowed to handle the channel internally (for cases
        where the approver and the desired handler are the same process).
        If successful, this method will cause the ChannelDispatch object to
        disappear, causing the ChannelDispatcher to emit DispatchCompleted.
        However, this method may fail because the dispatch has already been
        completed and the object has already gone - if this occurs, the
        approver MUST NOT proceed to handle the channel internally.
      </tp:docstring>

      <tp:possible-errors>
        <!-- FIXME -->
      </tp:possible-errors>
    </method>

  </interface>
</node>
<!-- vim:set sw=2 sts=2 et ft=xml: -->
