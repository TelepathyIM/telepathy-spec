<?xml version="1.0" ?>
<node name="/ChannelTypeStreamedMedia" xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0">
  <tp:copyright>
    Copyright (C) 2005, 2006 Collabora Limited
Copyright (C) 2005, 2006 Nokia Corporation
Copyright (C) 2006 INdT
  </tp:copyright>
  <tp:license>
    This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Type.StreamedMedia" tp:name-const="CHANNEL_TYPE_STREAMED_MEDIA">
    <tp:enum typename="MediaStreamType">
      <tp:enumvalue name="MEDIA_STREAM_TYPE_AUDIO" value="0"/>
      <tp:enumvalue name="MEDIA_STREAM_TYPE_VIDEO" value="1"/>
    </tp:enum>
    <tp:enum typename="MediaStreamState">
      <tp:enumvalue name="MEDIA_STREAM_STATE_DISCONNECTED" value="0"/>
      <tp:enumvalue name="MEDIA_STREAM_STATE_CONNECTING" value="1"/>
      <tp:enumvalue name="MEDIA_STREAM_STATE_CONNECTED" value="2"/>
    </tp:enum>
    <tp:enum typename="MediaStreamDirection">
      <tp:enumvalue name="MEDIA_STREAM_DIRECTION_NONE" value="0"/>
      <tp:enumvalue name="MEDIA_STREAM_DIRECTION_SEND" value="1"/>
      <tp:enumvalue name="MEDIA_STREAM_DIRECTION_RECEIVE" value="2"/>
      <tp:enumvalue name="MEDIA_STREAM_DIRECTION_BIDIRECTIONAL" value="3"/>
    </tp:enum>
    <tp:flags typename="MediaStreamPendingFlags">
      <tp:flag name="MEDIA_STREAM_PENDING_LOCAL_SEND" value="1"/>
      <tp:flag name="MEDIA_STREAM_PENDING_REMOTE_SEND" value="2"/>
    </tp:flags>
    <method name="ListStreams">
      <arg direction="out" type="a(uuuuuu)"/>
      <tp:docstring>
        Returns an array of structs representing the streams currently active
        within this channel. Each stream is identified by an unsigned integer
        which is unique for each stream within the channel.

        Stream types are identified by the following values:
          MEDIA_STREAM_TYPE_AUDIO = 0
          MEDIA_STREAM_TYPE_VIDEO = 1

        Stream states are identified by one of the following values:
          MEDIA_STREAM_STATE_DISCONNECTED = 0
            The stream is disconnected.
          MEDIA_STREAM_STATE_CONNECTING = 1
            The stream is trying to connect.
          MEDIA_STREAM_STATE_CONNECTED = 2
            The stream is connected.

        Stream directions are identified by one of the following values:
          MEDIA_STREAM_DIRECTION_NONE = 0
          MEDIA_STREAM_DIRECTION_SEND = 1
          MEDIA_STREAM_DIRECTION_RECEIVE = 2
          MEDIA_STREAM_DIRECTION_BIDIRECTIONAL = 3

        Pending directionality changes are indicated by a bitwise OR of the
        following flags:
          MEDIA_STREAM_PENDING_LOCAL_SEND = 1
            The local user has been asked to send media by the remote user.
            Call RequestStreamDirection to indicate whether or not this is
            acceptable.
          MEDIA_STREAM_PENDING_REMOTE_SEND = 2
            The remote user has been asked to send media by the local user.
            The StreamDirectionChanged signal will be emitted when the remote
            user accepts or rejects this change.

        Returns:
        an array of structs containing:
            the stream identifier
            the contact handle who the stream is with (or 0 if the stream
                represents more than a single member)
            the type of the stream
            the current stream state
            the current direction of the stream
            the current pending send flags
      </tp:docstring>
    </method>
    <method name="RemoveStreams">
      <arg direction="in" name="streams" type="au"/>
      <tp:docstring>
        Request that the given streams are removed.

        Parameters:
        streams - an array of stream identifiers (as defined in ListStreams)

        Possible Errors:
        InvalidArgument (unknown stream identifier)
      </tp:docstring>
    </method>
    <method name="RequestStreamDirection">
      <arg direction="in" name="stream_id" type="u"/>
      <arg direction="in" name="stream_direction" type="u"/>
      <tp:docstring>
        Request a change in the direction of an existing stream. In particular,
        this might be useful to stop sending media of a particular type,
        or inform the peer that you are no longer using media that is being
        sent to you.

        Depending on the protocol, streams which are no longer sending in
        either direction should be removed and a StreamRemoved signal emitted.
        Some direction changes can be enforced locally (for example,
        BIDIRECTIONAL -&gt; RECEIVE can be achieved by merely stopping sending),
        others may not be possible on some protocols, and some need agreement
        from the remote end. In this case, the MEDIA_STREAM_PENDING_REMOTE_SEND
        flag will be set in the StreamDirectionChanged signal, and the signal
        emitted again without the flag to indicate the resulting direction when
        the remote end has accepted or rejected the change.

        Parameters:
        stream_id - the stream identifier (as defined in ListStreams)
        stream_direction - the desired stream direction (as defined in
            ListStreams)

        PossibleErrors:
        InvalidArgument (unknown stream ID), NotAvailable (the requested
        direction is not available on this stream)
      </tp:docstring>
    </method>
    <method name="RequestStreams">
      <arg direction="in" name="contact_handle" type="u"/>
      <arg direction="in" name="types" type="au"/>
      <arg direction="out" type="a(uuuuuu)"/>
      <tp:docstring>
        Request that streams be established to exchange the given types of
        media with the given member. In general this will try and establish a
        bidirectional stream, but on some protocols it may not be possible to
        indicate to the peer that you would like to receive media, so a
        send-only stream will be created initially. In the cases where the
        stream requires remote agreement (eg you wish to receive media from
        them), the StreamDirectionChanged signal will be emitted with the
        MEDIA_STREAM_PENDING_REMOTE_SEND flag set, and the signal emitted again
        with the flag cleared when the remote end has replied.

        Parameters:
        contact_handle - a contact handle with whom to establish the streams
        types - an array of stream types (as defined in ListStreams)

        Returns:
        an array of structs (in the same order as the given stream types)
        containing:
            the stream identifier
            the contact handle who the stream is with (or 0 if the stream
                represents more than a single member)
            the type of the stream
            the current stream state
            the current direction of the stream
            the current pending send flags

        Possible Errors:
        InvalidHandle, InvalidArgument (invalid stream type), NotAvailable (if
        the contact is not able to do this stream type)
      </tp:docstring>
    </method>
    <signal name="StreamAdded">
      <arg name="stream_id" type="u"/>
      <arg name="contact_handle" type="u"/>
      <arg name="stream_type" type="u"/>
      <tp:docstring>
        Emitted when a new stream has been added to this channel.

        Parameters:
        stream_id - the stream identifier (as defined in ListStreams)
        contact_handle - the contact handle who the stream is with (or 0 if it
            represents more than a single member)
        stream_type - the stream type (as defined in ListStreams)
        stream_direction - the stream direction (as defined in ListStreams)
      </tp:docstring>
    </signal>
    <signal name="StreamDirectionChanged">
      <arg name="stream_id" type="u"/>
      <arg name="stream_direction" type="u"/>
      <arg name="pending_flags" type="u"/>
      <tp:docstring>
        Emitted when the direction or pending flags of a stream are changed. If
        the MEDIA_STREAM_PENDING_LOCAL_SEND flag is set, the remote user has
        requested that we begin sending on this stream. RequestStreamDirection
        should be called to indicate whether or not this change is acceptable.

        Parameters:
        stream_id - the stream identifier (as defined in ListStreams)
        stream_direction - the new stream direction (as defined in ListStreams)
        pending_flags - the new pending send flags (as defined in ListStreams)
      </tp:docstring>
    </signal>
    <signal name="StreamError">
      <arg name="stream_id" type="u"/>
      <arg name="errno" type="u"/>
      <arg name="message" type="s"/>
      <tp:docstring>
        Emitted when a stream encounters an error.

        Parameters:
        stream_id - the stream identifier (as defined in ListStreams)
        errno - a stream error number, one of the following:
          MEDIA_STREAM_ERROR_UNKNOWN = 0
            An unknown error occured.
          MEDIA_STREAM_ERROR_EOS = 1
            The end of the stream was reached.
        message - a string describing the error (for debugging purposes only)
      </tp:docstring>
    </signal>
    <signal name="StreamRemoved">
      <arg name="stream_id" type="u"/>
      <tp:docstring>
        Emitted when a stream has been removed from this channel.

        Parameters:
        stream_id - the stream identifier (as defined in ListStreams)
      </tp:docstring>
    </signal>
    <signal name="StreamStateChanged">
      <arg name="stream_id" type="u"/>
      <arg name="stream_state" type="u"/>
      <tp:docstring>
        Emitted when a member's stream's state changes.

        Parameters:
        stream_id - the stream identifier (as defined in ListStreams)
        stream_state - the new stream state (as defined in ListStreams)
      </tp:docstring>
    </signal>
    <tp:docstring>
      A channel that can send and receive streamed media such as audio or video.
    Provides a number of methods for listing and requesting new streams, and
    signals to indicate when streams have been added, removed and changed
    status.

    In general this should always be used in conjunction with the IceSignalling
    interface to exchange connection candidates and codec choices with
    whichever component is responsible for the streams. However, in certain
    applications where no candidate exchange is necessary (eg the streams are
    handled by specialised hardware which is controlled directly by the
    connection manager), the signalling interface can be omitted and this
    channel type used simply to control the streams.

    This channel type defines two type-specific capability flags (as used in
    Connection.Interface.Capabilities):
      CHANNEL_MEDIA_CAPABILITY_AUDIO = 1
        The handle is capable of using audio streams within a media channel.
      CHANNEL_MEDIA_CAPABILITY_VIDEO = 2
        The handle is capable of using video streams within a media channel.
    </tp:docstring>
    <tp:flag name="CHANNEL_MEDIA_CAPABILITY_AUDIO" value="1"/>
    <tp:flag name="CHANNEL_MEDIA_CAPABILITY_VIDEO" value="2"/>
  </interface>
</node>
<!-- vim:set sw=2 sts=2 et ft=xml: -->
