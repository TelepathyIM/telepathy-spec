<?xml version="1.0" ?>
<node name="/Channel_Type_Server_Authentication" xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0">
  <tp:copyright> Copyright © 2010 Collabora Limited </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Type.ServerAuthentication.DRAFT" tp:causes-havoc="experimental">
    <tp:requires interface="org.freedesktop.Telepathy.Channel"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>The type for a channel representing an authentication step with the
        server. The actual authentication functionality is implemented by
        additional interfaces, such as <tp:dbus-ref
          namespace="ofdT">Channel.Interface.SASLAuthentication.DRAFT</tp:dbus-ref>,
        depending on the value of
        <tp:member-ref>AuthenticationMethod</tp:member-ref>.</p>

      <p>Channels of this type SHOULD be signalled and dispatched while the
        <tp:dbus-ref namespace="ofdT">Connection</tp:dbus-ref> owning them is in
        the CONNECTING state. Normally, only one channel of this type will
        exist on a given Connection; if there is more than one, the handler
        must complete authentication with each of them in turn.</p>

      <p>Channels of this type cannot be requested with methods such as
        <tp:dbus-ref
          namespace="ofdT.Connection.Interface.Requests">CreateChannel</tp:dbus-ref>.
        They always have <tp:dbus-ref
          namespace="ofdT.Channel">Requested</tp:dbus-ref> = False,
        <tp:dbus-ref
          namespace="ofdT.Channel">TargetHandleType</tp:dbus-ref> = None
        and <tp:dbus-ref
          namespace="org.freedesktop.Telepathy.Channel">TargetHandle</tp:dbus-ref>
        = 0.</p>
    </tp:docstring>

    <property name="AuthenticationInformation"
              tp:name-for-bindings="Authentication_Information"
              type="a{sv}" tp:type="Auth_Details" access="read">
      <tp:docstring>
          Dictionary of information given by the CM which can be used by the
          handler for authentication.
      </tp:docstring>
    </property>

    <property name="AuthenticationMethod"
              tp:name-for-bindings="Authentication_Method"
              type="u" tp:type="Authentication_Type" access="read">
      <tp:docstring>
        This property defines the method used for the current
        authentication step. The functionality for each method is on a separate
        interface on the same channel; for example, channels with this property
        set to <tp:type>Authentication_Type</tp:type> SASL MUST implement
        <tp:dbus-ref
        namespace="org.freedesktop.Telepathy">Channel.Interface.SASLAuthentication.DRAFT</tp:dbus-ref>.
      </tp:docstring>
    </property>

    <tp:enum name="Authentication_Type" type="u">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The type of authentication offered by a ServerAuthentication channel.
          At the moment only Authentication_Type_SASL is supported, but
          Authentication_Type_Captcha is likely to be added in future.</p>
      </tp:docstring>

      <tp:enumvalue suffix="SASL" value="0">
        <tp:docstring>
          SASL authentication. The channel MUST implement <tp:dbus-ref
            namespace="ofdT">Channel.Interface.SASLAuthentication.DRAFT</tp:dbus-ref>.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:mapping name="Auth_Details" array-name="Auth_Details_List">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>An extensible map representing details provided by the server for
          authentication. Well-known keys, along with the type expected in the
          corresponding value:</p>

        <dl>
          <dt><code>username</code> (string)</dt>
          <dd>
            <p>The identity for which the client would like to be authorized,
              typically the 'account' from the <tp:dbus-ref
                namespace="ofdT.ConnectionManager">RequestConnection</tp:dbus-ref>
              parameters, normalized and formatted according to the
              conventions used for SASL in this protocol.</p>

            <tp:rationale>
              <p>The normalization used for SASL might not be the same
                normalization used elsewhere: for instance, in a protocol
                with email-like identifiers such as XMPP or SIP, the user
                "juliet@example.com" might have to authenticate to the
                example.com server via SASL PLAIN as "juliet".</p>
            </tp:rationale>

            <p>This is usually achieved by using the authorization identity for
              authentication, but an advanced Handler could offer the option
              to authenticate under a different identity.</p>

            <p>The terminology used here is that the authorization identity
              is who you want to act as, and the authentication identity is
              used to prove that you may do so. For instance, if Juliet is
              authorized to access a role account, "sysadmin@example.com",
              and act on its behalf, it might be possible to authenticate
              as "juliet@example.com" with her own password, but request to
              be authorized as "sysadmin@example.com" instead of her own
              account. See
              <a href="http://tools.ietf.org/html/rfc4422#section-3.4.1">RFC
                4422 §3.4.1</a> for more details.</p>

            <tp:rationale>
              <p>In SASL the authorization identity is normally guessed from
                the authentication identity, but the information available
                to the connection manager is the identity for which
                authorization is required, such as the desired JID in XMPP,
                so that's what we signal to UIs; it's up to the UI to
                choose whether to authenticate as the authorization identity
                or some other identity.</p>

              <p>As a concrete example, the "sysadmin" XMPP account mentioned
                above would have <code>{ 'account': 'sysadmin@example.com' }</code>
                in its Parameters, and
                <code>{ 'authorization-identity': 'sysadmin@example.com' }</code>
                in its AuthenticationInformation. A simple Handler would
                merely prompt for sysadmin@example.com's password, but a
                more advanced Handler might also ask for an authentication
                identity, defaulting to 'sysadmin@example.com'; if Juliet
                provided authentication identity 'juliet@example.com' and
                password 'romeo', the Handler might perform SASL PLAIN
                authentication using the initial response
                'sysadmin@example.com\000juliet@example.com\000romeo'.</p>
            </tp:rationale>
          </dd>

          <dt><tt>realm</tt> (string)</dt>
          <dd>
            <p>The default realm (as defined in
              <a href="http://tools.ietf.org/html/rfc2831#section-2.1.1">RFC
                2831</a>) to use for authentication, if the server does not
              supply one.</p>

            <tp:rationale>
              <p>The server is not required to provide a realm; if it doesn't,
                the client is expected to ask the user or provide a sensible
                default, typically the requested DNS name of the server.
                In some implementations of <code>DIGEST-MD5</code>, the
                server does not specify a realm, but expects that the client
                will choose a particular default, and authentication will
                fail if the client's default is different. Connection
                managers for protocols where this occurs are more easily able
                to work around these implementations than a generic client
                would be.</p>
            </tp:rationale>
          </dd>
          <dt><tt>session-id</tt> (string)</dt>
          <dd>
            XMPP session id, as needed for the legacy jabber digest method.
          </dd>
        </dl>
      </tp:docstring>

      <tp:member type="s" name="Key">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          A key for a detail, which SHOULD be one of the well-known keys, if possible.
        </tp:docstring>
      </tp:member>

      <tp:member name="Value" type="v">
        <tp:docstring>
          The detail's value.
        </tp:docstring>
      </tp:member>
    </tp:mapping>

  </interface>
</node>
<!-- vim:set sw=2 sts=2 et ft=xml: -->
