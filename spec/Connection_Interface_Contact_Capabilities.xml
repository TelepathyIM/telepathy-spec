<?xml version="1.0" ?>
<node name="/Connection_Interface_Contact_Capabilities" xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0">
  <tp:copyright> Copyright (C) 2005, 2006, 2008 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright (C) 2005, 2006, 2008 Nokia Corporation </tp:copyright>
  <tp:copyright> Copyright (C) 2006 INdT </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Connection.Interface.ContactCapabilities.DRAFT2"
    tp:causes-havoc="experimental">
    <tp:requires interface="org.freedesktop.Telepathy.Connection"/>
    <tp:added version="0.17.16">(as a draft)</tp:added>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Contact capabilities describe the channel classes which may be
        created with a given contact in advance of attempting to create a
        channel. Each capability represents a commitment by the
        connection manager that it will ordinarily be able to create a channel
        with a contact when given a request with the properties defined by the
        channel class.</p>

      <p>Capabilities pertain to particular contact handles, and represent
        activities such as having a text chat, a voice call with the user or a
        stream tube of a defined type.</p>

      <p>This interface also enables user interfaces to notify the connection
        manager what capabilities to advertise for the user to other contacts.
        This is done by using the
        <tp:member-ref>UpdateCapabilities</tp:member-ref> method.</p>

      <tp:rationale>
        <p>XMPP is a major user of this interface: XMPP contacts will not,
          in general, be callable using VoIP unless they advertise suitable
          Jingle capabilities.</p>

        <p>Many other protocols also have some concept of capability flags,
          which this interface exposes in a protocol-independent way.</p>
      </tp:rationale>
    </tp:docstring>

    <tp:simple-type name="Client_Capability" type="s"
      array-name="Client_Capability_List">
      <tp:docstring>
        A <tp:type>DBus_Interface</tp:type>, followed by a slash '/' character
        and an identifier for a capability defined by that interface. The
        capability identifier SHOULD be in lower case. If an interface
        references an external specification which is case-insensitive (such
        as MIME), then names from that specification MUST be normalized to
        lower-case before providing them to this Telepathy API, so that
        implementations can safely rely on simple byte-by-byte comparison.

        <tp:rationale>
          These aren't D-Bus core Properties, and we want them to look visibly
          different.
        </tp:rationale>

        <p>An initial set of client capabilities is defined here: when this
          interface leaves draft status, these capabilities should be defined
          by the MediaSignalling interface.</p>

        <dl>

          <dt>org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/gtalk-p2p</dt>
          <dd>
            <p>The client can implement streaming for streams whose <tp:dbus-ref
                namespace="org.freedesktop.Telepathy.Media.StreamHandler">NATTraversal</tp:dbus-ref>
              property is <code>gtalk-p2p</code>.</p>
          </dd>

          <dt>org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/ice-udp</dt>
          <dd>
            <p>The client can implement streaming for streams whose <tp:dbus-ref
                namespace="org.freedesktop.Telepathy.Media.StreamHandler">NATTraversal</tp:dbus-ref>
              property is <code>ice-udp</code>.</p>
          </dd>

          <dt>org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/wlm-8.5</dt>
          <dd>
            <p>The client can implement streaming for streams whose <tp:dbus-ref
                namespace="org.freedesktop.Telepathy.Media.StreamHandler">NATTraversal</tp:dbus-ref>
              property is <code>wlm-8.5</code>.</p>
          </dd>

          <dt>org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/wlm-2009</dt>
          <dd>
            <p>The client can implement streaming for streams whose <tp:dbus-ref
                namespace="org.freedesktop.Telepathy.Media.StreamHandler">NATTraversal</tp:dbus-ref>
              property is <code>wlm-2009</code>.</p>
          </dd>

          <dt>org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/audio/<em>SUBTYPE</em></dt>
          <dt>org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/video/<em>SUBTYPE</em></dt>
          <dd>
            <p>The client supports media streaming with the audio or video codec
              whose MIME type is audio/<em>SUBTYPE</em> or
              video/<em>SUBTYPE</em> (the subtype MUST appear in lower
              case when used with this interface). Clients MAY support more
              codecs than they explicitly advertise support for; clients SHOULD
              explicitly advertise support for their preferred codec(s), and
              for codecs that are, in practice, significant in codec
              negotiation.</p>

            <tp:rationale>
              <p>For instance, the XMPP capability used by the Google Video
                Chat web client to determine whether a client is compatible
                with it requires support for H264 video, so an XMPP
                connection manager that supports this version of Jingle should
                not advertise the Google Video Chat capability unless there
                is at least one installed client that declares that it supports
                <code>video/h264</code> on StreamedMedia channels.</p>
            </tp:rationale>

            <p>[FIXME: should we say the next paragraph, for completeness?]</p>

            <p>Clients supporting video MUST advertise support for at least
              one video codec, while clients supporting audio MUST advertise
              support for at least one audio codec.</p>

            <p>For example, a client could advertise support for
              Speex, Theora and H264 by having three
              Feature flags,
              <code>org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/audio/speex</code>,
              <code>org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/video/theora</code> and
              <code>org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/video/h264</code>.
              .</p>
          </dd>

        </dl>
      </tp:docstring>
    </tp:simple-type>

    <tp:struct name="Client_Capabilities"
      array-name="Client_Capabilities_List">
      <tp:docstring>
        A structure representing the capabilities of a single client.
      </tp:docstring>

      <tp:member name="Well_Known_Name" type="s" tp:type="DBus_Well_Known_Name">
        <tp:docstring>
          For implementations of the <tp:dbus-ref
            namespace="org.freedesktop.Telepathy">Client</tp:dbus-ref>
          interface, the well-known bus name name of the client; for any other
          process, any other reversed domain name that uniquely identifies it.
        </tp:docstring>
      </tp:member>

      <tp:member name="Channel_Classes" type="aa{sv}"
           tp:type="String_Variant_Map[]">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          An array of channel classes that can be handled by this client.
          This will usually be a copy of the client's <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Client.Handler">HandlerChannelFilter</tp:dbus-ref>
          property.
        </tp:docstring>
      </tp:member>

      <tp:member name="Capabilities" type="as" tp:type="Client_Capability[]">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          An array of client capabilities supported by this client, to be
          used by the connection manager to determine what capabilities to
          advertise. This will usually be a copy of the client's <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Client.Handler">Capabilities</tp:dbus-ref>
          property.
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <method name="UpdateCapabilities" tp:name-for-bindings="Update_Capabilities">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Alter the connection's advertised capabilities to include
          the intersection of the given clients' capabilities with what the
          connection manager is able to implement.</p>

        <p>On connections managed by the ChannelDispatcher, processes other
          than the ChannelDispatcher SHOULD NOT call this method, and the
          ChannelDispatcher SHOULD use this method to advertise the
          capabilities of all the registered <tp:dbus-ref
            namespace="org.freedesktop.Telepathy">Client.Handler</tp:dbus-ref>
          implementations.On connections not managed by the ChannelDispatcher,
          clients MAY use this method directly, to indicate the channels they
          will handle and the extra capabilities they have.</p>

        <p>Upon a successful invocation of this method, the connection manager
          will only emit the
          <tp:member-ref>ContactCapabilitiesChanged</tp:member-ref> signal
          for the user's <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Connection">SelfHandle</tp:dbus-ref>
          if, in the underlying protocol, the new capabilities are distinct
          from the previous state.</p>

        <tp:rationale>
          <p>The connection manager will essentially intersect the provided
            capabilities and the channel classes it implements. Therefore,
            certain properties which are never fixed for a channel class
            (such as the target handle, or the Parameters property of a tube
            channel) will almost certainly not be advertised.</p>
        </tp:rationale>

        <p>This method MAY be called on a newly-created connection while it
          is still in the DISCONNECTED state, to request that when the
          connection connects, it will do so with the appropriate
          capabilities. Doing so MUST NOT fail.</p>
      </tp:docstring>

      <arg direction="in" name="Client_Capabilities" type="a(saa{sv}as)"
        tp:type="Client_Capabilities[]">
        <tp:docstring>
          <p>The capabilities of one or more clients.</p>

          <p>For each client in the given list, any capabilities previously
            advertised for the same client name are discarded, then replaced by
            the capabilities indicated.</p>

          <p>As a result, if a client becomes unavailable, this method SHOULD
            be called with a <tp:type>Client_Capabilities</tp:type> structure
            containing its name, an empty list of channel classes, and an
            empty list of capabilities. When this is done, the connection
            manager SHOULD free all memory associated with that client name.</p>

          <tp:rationale>
            <p>This method takes a list of clients so that
              when the channel dispatcher first calls it (with a list of all
              the Handlers that are initially available), the changes can be
              made atomically, with only one transmission of updated
              capabilities to the network. Afterwards, the channel dispatcher
              will call this method with a single-element list every time
              a Handler becomes available or unavailable.</p>
          </tp:rationale>

          <p>The connection manager MUST ignore any channel classes and client
            capabilities for which there is no representation in the protocol
            or no support in the connection manager.</p>
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <method name="GetContactCapabilities"
            tp:name-for-bindings="Get_Contact_Capabilities">
      <arg direction="in" name="handles" type="au" tp:type="Contact_Handle[]">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>An array of contact handles for this connection.</p>

          <p>The handle zero MUST NOT be included in the request.</p>
        </tp:docstring>
      </arg>
      <arg direction="out" type="a{ua(a{sv}as)}"
           tp:type="Contact_Capabilities_Map" name="Contact_Capabilities">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          An array of structures containing:
          <ul>
            <li>a dictionary mapping the channel properties to their values.</li>
            <li>an array of additional allowed properties</li>
          </ul>
        </tp:docstring>
      </arg>
      <tp:docstring>
        Returns an array of enhanced capabilities for the given contact handles.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle">
          <tp:docstring>
            The handle does not represent a contact. Zero is always invalid.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <signal name="ContactCapabilitiesChanged"
            tp:name-for-bindings="Contact_Capabilities_Changed">
      <arg name="caps" type="a{ua(a{sv}as)}"
           tp:type="Contact_Capabilities_Map">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          All the capabilities of the contacts
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Announce that there has been a change of capabilities on the
          given handles. A single signal can be emitted for several
        contacts.</p>

        <tp:rationale>
          <p>The underlying protocol can get several contacts' capabilities at
            the same time.</p>
        </tp:rationale>

      </tp:docstring>
    </signal>

  <tp:mapping name="Contact_Capabilities_Map"
              array-name="Contact_Capabilities_Map_List">
    <tp:docstring>A mapping from contact handle to their capabilities.
    </tp:docstring>
    <tp:member type="u" name="Key" tp:type="Contact_Handle">
      <tp:docstring>
        A contact handle.
      </tp:docstring>
    </tp:member>
    <tp:member type="a(a{sv}as)" name="Value"
               tp:type="Requestable_Channel_Class[]">
      <tp:docstring>
        The contact capabilities.
      </tp:docstring>
    </tp:member>
  </tp:mapping>

  </interface>
</node>
<!-- vim:set sw=2 sts=2 et ft=xml: -->
