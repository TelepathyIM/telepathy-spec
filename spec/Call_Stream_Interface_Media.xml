<?xml version="1.0" ?>
<node name="/Call_Stream_Interface_Media"
  xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0">
  <tp:copyright>Copyright © 2009 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      Lesser General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
      02110-1301, USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.Call.Stream.Interface.Media.Draft"
      tp:causes-havoc="experimental">
    <tp:added version="0.17.UNRELEASED">(as a draft)</tp:added>
    <tp:requires interface="org.freedesktop.Telepathy.Call.Stream"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    </tp:docstring>

    <tp:method name="SetCredentials" tp:name-for-bindings="Set_Credentials">
      <tp:docstring>
        Used to set the username fragment and password for streams that have
        global credentials
      </tp:docstring>
      <arg name="username" type="s" direction="in"/>
      <arg name="password" type="s" direction="in" />
    </tp:method>

    <tp:mapping name="Candidate_Info">
      <tp:member name="key" type="s"/>
      <tp:member name="value" type="v"/>
      <tp:docstring>
        Extra information about the candidate. Allowed and Mandatory keys
        depend on the transport protocol used. The following keys are commenly
        used:
        <dl>
          <dt> Type (u)</dt>
          <dd> type of candidate (host, srflx, prflx, relay)</dd>

          <dt> Foundation (s)</dt>
          <dd> the foundation of this candiate</dd>

          <dt> Protocol (u) </dt>
          <dd> Underlying protocol of the candidate (udp, tcp) </dd>

          <dt> Priority (u) </dt>
          <dd> Priority of the candidate </dd>

          <dt> BaseIP (u) </dt>
          <dd> Base IP of this candidate </dd>

          <dt> Username (s) </dt>
          <dd> Username of this candidate
            (only if credentials are per candidate)</dd>

          <dt> Password (s) </dt>
          <dd> Password of this candidate
            (only if credentials are per candidate)</dd>

          <dt> RawUDPFallback (b) </dt>
          <dd> Indicate whether this candidate may be used to provide a UDP
               fallback</dd>

        </dl>
      </tp:docstring>
    </tp:mapping>

    <tp:struct name="Candidate" array-name="Candidate_List">
      <tp:docstring>A Stream Candidate</tp:docstring>

      <tp:member name="component" type="u" />
      <tp:member name="ip" type="s" />
      <tp:member name="port" type="q" />
      <tp:member name="info" type="a{sv}" tp:type="Candidate_Info">
      </tp:member>

    </tp:struct>

    <method name="AddCandidates" tp:name-for-bindings="Add_Candidates">
      <arg name="candidates" direction="in"
        type="a(usqa{sv})" tp:type="Candidate[]" />
    </method>

    <method name="CandidatesPrepared"
      tp:name-for-bindings="Candidates_Prepared">
      <tp:docstring>
        This indicates to the CM that the initial batch of candidates has been
        added.
      </tp:docstring>
    </method>

    <tp:enum type="u" name="Stream_Transport_Type">
      <tp:enumvalue suffix="Raw_UDP" value="0" />
      <tp:enumvalue suffix="ICE" value="1" />
      <tp:enumvalue suffix="GTALK_P2P" value="2" />
      <tp:enumvalue suffix="MSN" value="3" />
      <tp:enumvalue suffix="WLM2009" value="4" />
    </tp:enum>

    <property name="Transport" tp:name-for-bindings="Transport"
        type="u" tp:type="Stream_Transport_Type" access="read">
    </property>

    <property name="LocalCandidates" tp:name-for-bindings="Local_Candidates"
      type="a(usqa{sv})" tp:type="Candidate[]" access="read">
    </property>

    <signal name="LocalCandidatesAdded"
        tp:name-for-bindings="Local_Candidates_Added">
      <arg name="Candidates"
        type="a(usqa{sv})" tp:type="Candidate[]"/>
    </signal>

    <property name="LocalCredentials" tp:name-for-bindings="Local_Credentials"
      type="(ss)" access="read">
    </property>

    <signal name="LocalCredentialsSet"
        tp:name-for-bindings="LocalCredentialsSet">
      <arg name="username" type="s" />
      <arg name="password" type="s" />
    </signal>

    <property name="STUNServers" tp:name-for-bindings="STUN_Servers"
      type="a(sq)" tp:type="Socket_Address_IP[]" access="read">
      <tp:docstring>
        The IP addresses of possible STUN servers to use for NAT traversal, as
        dotted-quad IPv4 address literals or RFC2373 IPv6 address literals.
        This property cannot change once the stream has been created, so there
        is no change notification. The IP addresses MUST NOT be given as DNS
        hostnames.

        <tp:rationale>
          High-quality connection managers already need an asynchronous
          DNS resolver, so they might as well resolve this name to an IP
          to make life easier for streaming implementations.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="RelayInfo" type="aa{sv}" access="read"
      tp:type="String_Variant_Map[]" tp:name-for-bindings="Relay_Info">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of mappings describing TURN or Google relay servers
          available for the client to use in its candidate gathering, as
          determined from the protocol. Map keys are:</p>

        <dl>
          <dt><code>ip</code> - s</dt>
          <dd>The IP address of the relay server as a dotted-quad IPv4
            address literal or an RFC2373 IPv6 address literal. This MUST NOT
            be a DNS hostname.

            <tp:rationale>
              High-quality connection managers already need an asynchronous
              DNS resolver, so they might as well resolve this name to an IP
              and make life easier for streaming implementations.
            </tp:rationale>
          </dd>

          <dt><code>type</code> - s</dt>
          <dd>
            <p>Either <code>udp</code> for UDP (UDP MUST be assumed if this
              key is omitted), <code>tcp</code> for TCP, or
              <code>tls</code>.</p>

            <p>The precise meaning of this key depends on the
              <tp:member-ref>Transport</tp:member-ref> property: if
              Transport is <code>ice-udp</code>, <code>tls</code> means
              TLS over TCP as referenced by ICE draft 19, and if
              Transport is <code>gtalk-p2p</code>, <code>tls</code> means
              a fake SSL session over TCP as implemented by libjingle.</p>
          </dd>

          <dt><code>port</code> - q</dt>
          <dd>The UDP or TCP port of the relay server as an ASCII unsigned
            integer</dd>

          <dt><code>username</code> - s</dt>
          <dd>The username to use</dd>

          <dt><code>password</code> - s</dt>
          <dd>The password to use</dd>

          <dt><code>component</code> - u</dt>
          <dd>The component number to use this relay server for, as an
            ASCII unsigned integer; if not included, this relay server
            may be used for any or all components.

            <tp:rationale>
              In ICE draft 6, as used by Google Talk, credentials are only
              valid once, so each component needs relaying separately.
            </tp:rationale>
          </dd>
        </dl>

        <tp:rationale>
          <p>An equivalent of the gtalk-p2p-relay-token property on
            MediaSignalling channels is not included here. The connection
            manager should be responsible for making the necessary HTTP
            requests to turn the token into a username and password.</p>
        </tp:rationale>

        <p>The type of relay server that this represents depends on
          the value of the <tp:member-ref>Transport</tp:member-ref>
          property. If Transport is ice-udp, this is a TURN server;
          if NATTraversal is gtalk-p2p, this is a Google relay server;
          otherwise, the meaning of RelayInfo is undefined.</p>

        <p>If relaying is not possible for this stream, the list is empty.</p>
      </tp:docstring>
    </property>

    <signal name="ServerInfoRetrieved"
      tp:name-for-bindings="Server_Info_Retrieved">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p> Signals that the initial information about STUN and Relay servers
            has been retrieived.
        </p>
      </tp:docstring>
    </signal>

    <property name="RetrievedServerInfo" type="b"
        tp:name-for-bindings="Retrieved_Server_Info" access="read">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>True if the initial information about STUN servers and Relay servers
           has been retrieved. Change notification via the ServerInfoRetrieved
           signal.
        </p>
      </tp:docstring>
    </property>

    <signal name="EndpointsChanged"
        tp:name-for-bindings="Endpoints_Changed">
      <arg name="EndpointsAdded" type="ao" />
      <arg name="EndpointsRemoved" type="ao" />
    </signal>

    <property name="Endpoints" tp:name-for-bindings="Endpoints"
      type="ao" access="read">
        <p> The list of endpoints
           <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Call.Stream"
              >Endpoint.Draft</tp:dbus-ref>
           that exist for this stream.
        </p>
    </property>
  </interface>
</node>
<!-- vim:set sw=2 sts=2 et ft=xml: -->
