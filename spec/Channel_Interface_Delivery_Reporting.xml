<?xml version="1.0" ?>
<node name="/Channel_Interface_Delivery_Reporting"
  xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0">
  <tp:copyright>Copyright (C) 2008 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright (C) 2008 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Interface.DeliveryReporting">
    <tp:requires interface="org.freedesktop.Telepathy.Channel.Type.Text"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>This interface extends the Text interface with improved sent-message
        status reporting. Channels implementing this interface
        SHOULD also implement the MessageParts interface; clients supporting
        this interface SHOULD also have at least basic support for the
        MessageParts interface.</p>

        <tp:rationale>
          This interface replaces Text.SendError, adding support for protocols
          where the message content is not echoed back to the sender on
          failure. It also adds support for receiving positive
          acknowledgements, and has properties for state recovery (ensuring
          that incoming delivery reports are not lost if there is not
          currently a process handling them).
        </tp:rationale>
    </tp:docstring>

    <tp:mapping name="Delivery_Report">
      <tp:docstring>
        A delivery report, indicating success or failure while delivering
        a previously sent message.
      </tp:docstring>

      <tp:member name="Key" type="s">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Well-known keys, and the corresponding value types, include:</p>

          <dl>
            <dt>status (u - Delivery_Status)</dt>
            <dd>
              The status of the message. This key is required.
            </dd>

            <dt>timestamp (u - Unix_Timestamp)</dt>
            <dd>
              The time the delivery report was sent (if available) or
              received (otherwise). Providing this key is strongly
              recommended.
            </dd>

            <dt>token (s)</dt>
            <dd>
              <p>An identifier for the message to which this delivery report
                refers. MUST NOT be an empty string. Omitted if not
                available.</p>

              <p>Clients may match this against the token produced by the
                SendMessage method and MessageSent signal on the MessageParts
                interface. A status report with no token could match any sent
                message, and a sent message with an empty token could match
                any status report.</p>

                <tp:rationale>
                  In an ideal world, we could unambiguously match reports
                  against messages; however, deployed protocols are not ideal,
                  and not all reports and messages can be matched.
                </tp:rationale>
            </dd>

            <dt>parts (aa{sv} - Message_Part[])</dt>
            <dd>
              <p>The message content, as defined by the MessageParts interface.
                Omitted if no content is available, or if it would contain
                only a single "text/plain" part (in which case the 'content'
                key is sufficient). Content MAY have been
                truncated, message parts MAY have been removed, and message
                parts MAY have had their content removed (i.e. the message part
                metadata is present, but the 'content' key is not).</p>

              <tp:rationale>
                Some protocols, like XMPP, echo the failing message back to
                the sender. This is sometimes the only way to match it
                against the sent message, so we include it here.
              </tp:rationale>

              <p>Unlike in the MessageParts interface, content not visible
                in the value for this key cannot be retrieved by another
                means, so the connection manager SHOULD be more
                aggressive about including (possibly truncated) message
                content in the 'content' key.</p>

              <tp:rationale>
                The MessageParts interface needs to allow all content to be
                retrieved, but in this interface, the content we provide is
                merely a hint; so some is better than none, and it doesn't
                seem worth providing an API as complex as MessageParts.
              </tp:rationale>
            </dd>

            <dt>send-error (u - Channel_Text_Send_Error)</dt>
            <dd>
              The reason for the failure. MUST be omitted if this was a
              successful delivery; MAY be omitted if it would be
              Channel_Text_Send_Error_Unknown.
            </dd>

            <dt>report (aa{sv} - Message_Part[])</dt>
            <dd>
              A human-readable error report from the server or from the remote
              contact's client, to be interpreted as in the MessageParts
              interface. Omitted if none is available.

              <tp:rationale>
                Some protocols, like XMPP, allow the server to send back a
                human-readable description of the error (possibly even in
                multiple languages as alternatives, hence we support multiple
                parts here).
              </tp:rationale>
            </dd>
          </dl>
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <tp:enum name="Delivery_Status" value-prefix="Delivery_Status">
      <tp:docstring>
        The status of a message as indicated by a delivery report.
        If this enum is extended in future specifications, this should
        only be to add new non-overlapping conditions (i.e. all failures
        should still be signalled as either Temporarily_Failed
        or Permanently_Failed).
      </tp:docstring>

      <tp:enumvalue suffix="Unknown" value="0">
        <tp:docstring>
          The message's disposition is unknown.
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Delivered" value="1">
        <tp:docstring>
          The message has been delivered to the intended recipient.
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Temporarily_Failed" value="2">
        <tp:docstring>
          Delivery of the message has failed. Clients SHOULD notify the user,
          but MAY automatically try sending another copy of the message.

          <tp:rationale>
            Similar to errors with type="wait" in XMPP; analogous to
            4xx errors in SMTP.
          </tp:rationale>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Permanently_Failed" value="3">
        <tp:docstring>
          Delivery of the message has failed. Clients SHOULD NOT try again
          unless by specific user action. If the user does not modify the
          message or alter configuration before re-sending, this error is
          likely to happen again.

          <tp:rationale>
            Similar to errors with type="cancel", type="modify"
            or type="auth" in XMPP; analogous to 5xx errors in SMTP.
          </tp:rationale>
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:mapping name="Delivery_Report_Map">
      <tp:docstring>
        A mapping containing incoming delivery reports that have not yet been
        acknowledged.
      </tp:docstring>

      <tp:member name="ID" type="u" tp:type="Message_ID">
        <tp:docstring>
          An incoming message ID, taken from the same per-channel pool as
          those used in the Text and MessageParts interfaces, which can be
          used to acknowledge the delivery report and remove it from the
          mapping
        </tp:docstring>
      </tp:member>

      <tp:member name="Report" type="a{sv}" tp:type="Delivery_Report">
        <tp:docstring>
          A delivery report
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <property name="DeliveryReports" type="a{ua{sv})" access="read"
      tp:type="Delivery_Report_Map">
      <tp:docstring>
        A mapping containing incoming delivery reports that have not yet been
        acknowledged. The keys are incoming message IDs (which come from the
        same pool as those used by the Text and MessageParts interfaces)
        and the values are Delivery_Report mappings. Delivery reports can
        be removed from this mapping using AcknowledgePendingMessages
        on the Text interface.
      </tp:docstring>
    </property>

    <signal name="DeliveryReport">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A new delivery report has been added to the DeliveryReports mapping.
          It may be acknowledged using the AcknowledgePendingMessages method
          on the Text interface.</p>

        <p>Whenever this signal is emitted for a delivery error report,
          Channel.Type.Text.SendError SHOULD also be emitted; whenever
          Channel.Type.Text.SendError is emitted, this signal MUST also be
          emitted.</p>

        <tp:rationale>
          The double-emission behaviour ensures that old clients
          that do not support MessageStatus will receive all possible failure
          reports, and so will new clients that follow this rule:
          listen for DeliveryReport if the MessageStatus interface is
          present, or SendError otherwise.
        </tp:rationale>
      </tp:docstring>

      <arg name="ID" type="u" tp:type="Message_ID">
        <tp:docstring>
          The message ID to be used to acknowledge the incoming delivery report
          and remove it from the DeliveryReports mapping.
        </tp:docstring>
      </arg>

      <arg name="Report" type="a{sv}" tp:type="Delivery_Report">
        <tp:docstring>
          The delivery report's contents.
        </tp:docstring>
      </arg>
    </signal>

  </interface>
</node>
<!-- vim:set sw=2 sts=2 et ft=xml: -->
