<?xml version="1.0" ?>
<node name="/Client_Approver"
  xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0">
  <tp:copyright>Copyright (C) 2008 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright (C) 2008 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
<p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Client.Approver.DRAFT"
    tp:causes-havoc="experimental">

    <tp:requires interface="org.freedesktop.Telepathy.Client.DRAFT"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Approvers notify the user that new channels have been created,
        and also select which channel handler will be used for the channel,
        either by asking the user or by choosing the most appropriate
        channel handler (for instance, a GNOME or KDE approver could
        give preference to a channel handler from the same desktop
        environment on the basis that it is likely to integrate better
        with other applications). It is possible to have an approver and
        a channel handler in the same process.</p>

      <p>All approvers are notified simultaneously. For instance, in a
        desktop system, there might be one approver that displays a
        notification-area icon, one that is part of a contact list
        window and highlights contacts there, and one that is part
        of a full-screen media player.</p>

      <p>Any approver can approve the handling of a channel with a
        particular channel handler. Approvers can also request that the
        channel is rejected, or request that they are allowed to handle
        the channel internally (for the case where an approver is also
        a channel handler). The first approver to reply gets its decision
        acted on; any other approvers that reply at the same time will
        get a D-Bus error, indicating that the channel has already been
        dealt with.</p>

      <p>Approvers should usually prompt the user and ask for
        confirmation, rather than dispatching the channel to a handler
        straight away.</p>
    </tp:docstring>

    <method name="HandleDispatch">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Called by the channel dispatcher when a ChannelDispatch in which the
          approver has registered an interest is created.</p>

        <p>The channel dispatcher SHOULD call this method on all approvers
          at the same time. If no approvers return from this method
          successfully (for instance because no approvers are running),
          the channel dispatcher SHOULD consider this to be an error, and
          recover by dispatching the channel to a handler chosen in an
          implementation-dependent way.</p>

        <tp:rationale>
          Processes that aren't approvers shouldn't be making connections
          anyway - there should always be at least one approver running.
          (FIXME: or should the CD attempt to service-activate an approver?)
        </tp:rationale>
      </tp:docstring>

      <arg name="Handlers" type="as" direction="in">
        <tp:docstring>
          The list of clients that could handle this channel. The channel
          dispatcher SHOULD order them with the "most preferred" handler
          first, in some implementation-dependent way.
        </tp:docstring>
        <!-- FIXME: what type is a client? An object path? A bus name? -->
      </arg>

      <arg name="Dispatch" type="o" direction="in">
        <tp:docstring>
          The channel dispatch operation, which is an object inside the
          channel dispatcher (and hence has the same bus name as the
          channel dispatcher).
        </tp:docstring>
      </arg>

      <arg name="Connection" type="o" direction="in">
        <tp:docstring>
          The Telepathy connection. Its well-known bus name can be derived
          from its object path by replacing all '/' with '.' and removing
          the leading '.' that results.
        </tp:docstring>
      </arg>

      <arg name="Channels" type="a(oa{sv})" direction="in">
        <tp:docstring>
          The channel bundle. The well-known bus name for all these channels
          is the same as for the Connection.
        </tp:docstring>
      </arg>
    </method>

  </interface>
</node>
<!-- vim:set sw=2 sts=2 et ft=xml: -->
