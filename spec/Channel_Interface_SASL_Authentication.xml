<?xml version="1.0" ?>
<node name="/Channel_Interface_SASL_Authentication"
      xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0">
  <tp:copyright> Copyright © 2010 Collabora Limited </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Interface.SASLAuthentication.DRAFT" tp:causes-havoc="experimental">
    <tp:requires interface="org.freedesktop.Telepathy.Channel"/>
    <tp:requires interface="org.freedesktop.Telepathy.Channel.Type.ServerAuthentication.DRAFT"/>
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>A channel interface for SASL authentication,
        as defined by
        <a href="http://tools.ietf.org/html/rfc4422">RFC 4422</a>.</p>

      <p>In some protocols, such as XMPP, authentication with the server
        is carried out using SASL. In these protocols, a channel with this
        interface can provide a simple 1:1 mapping of the SASL negotiations
        taking place in the protocol.</p>

      <p>In other protocols, the connection manager can require that a
        user interface authenticate with it via SASL as a way to get the
        user's credentials interactively. In particular, this can be used to
        connect to protocols that may require a password, without
        requiring that the password is saved in the <tp:dbus-ref
          namespace="ofdT">Account.Parameters</tp:dbus-ref>.</p>

      <tp:rationale>
        <p>By providing SASL directly when the protocol supports it, we can
          use mechanisms like Kerberos or Google's <code>X-GOOGLE-TOKEN</code>
          without specific support in the connection manager.</p>

        <p>Protocols where SASL is not used typically have a simple
          username/password-based authentication mechanism. In these
          protocols, we can use the same authentication client to query
          the user's password (either interactively, or from a storage
          mechanism like <code>gnome-keyring</code>), by having the
          connection manager implement the server side of a simple
          pseudo-SASL mechanism like <code>X-TELEPATHY-PLAIN</code>.</p>
      </tp:rationale>

      <p>For channels managed by a
        <tp:dbus-ref namespace="ofdT">ChannelDispatcher</tp:dbus-ref>,
        only the channel's <tp:dbus-ref
          namespace="ofdT.Client">Handler</tp:dbus-ref> may call the
        methods on this interface. Other clients MAY observe the
        authentication process by watching its signals and properties.</p>

      <tp:rationale>
        <p>There can only be one Handler, which is a good fit for SASL's
          1-1 conversation between a client and a server.</p>
      </tp:rationale>
    </tp:docstring>

    <tp:simple-type name="SASL_Mechanism" type="s"
      array-name="SASL_Mechanism_List">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A SASL mechanism, as defined by
          <a href="http://tools.ietf.org/html/rfc4422">RFC 4422</a>
          and registered in
          <a href="http://www.iana.org/assignments/sasl-mechanisms">the
            IANA registry of SASL mechanisms</a>, or an unregistered
          SASL mechanism such as <code>X-GOOGLE-TOKEN</code> used in the
          same contexts.</p>

        <p>As a special case, mechanisms starting with
          <code>X-TELEPATHY-</code> are defined by this specification.
          Use of these mechanisms indicates that the user's credentials
          are to be passed to the connection manager, which will then use
          them for non-SASL authentication with the server. The only such
          mechanism currently defined is <code>X-TELEPATHY-PLAIN</code>.</p>

        <p>The <code>X-TELEPATHY-PLAIN</code> mechanism works much like
          <a href="http://tools.ietf.org/html/rfc4616">the
            <code>PLAIN</code> mechanism defined in RFC 4616</a>:</p>

        <ul>
          <li>The client MUST call
            <tp:member-ref>StartMechanismWithData</tp:member-ref>, with
            Initial_Data set to the following sequence of bytes:
            0x00, followed by the <code>username</code> from
            <tp:dbus-ref
              namespace="ofdT.Channel.Type">ServerAuthentication.DRAFT.AuthenticationInformation</tp:dbus-ref>
            encoded in UTF-8,
            followed by 0x00, followed by the password encoded in UTF-8.
            For simplicity, calling <tp:member-ref>StartMechanism</tp:member-ref>
            followed by calling <tp:member-ref>Respond</tp:member-ref> is not
            allowed in this mechanism.</li>

          <li>The connection manager extracts the username and
            password from the Initial_Data. If the Initial_Data does not have
            the given form, it MUST abort authentication with an error.
            If the username does not match the one from the
            AuthenticationInformation, it MAY abort authentication with an
            error. Otherwise, it uses them to authenticate itself to the
            server.</li>

          <li>When the connection manager finishes its attempt to authenticate
            to the server, the channel's state changes to
            either SASL_Status_Server_Succeeded or
            SASL_Status_Server_Failed as appropriate.</li>
        </ul>
      </tp:docstring>
    </tp:simple-type>

    <property name="AvailableMechanisms"
              tp:name-for-bindings="Available_Mechanisms"
              type="as" tp:type="SASL_Mechanism[]" access="read">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        The SASL mechanisms as offered by the server, such as <code>[ "PLAIN",
        "DIGEST-MD5", "SCRAM-SHA-1" ]</code>.
      </tp:docstring>
    </property>

    <property name="Secure"
             tp:name-for-bindings="Secure" type="b" access="read">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>True if this authentication process occurs over a secure
          connection, e.g. one where TLS was previously negotiated.
          Clients MAY use this property to decide whether the
          <code>PLAIN</code> mechanism is acceptable, for instance.</p>
      </tp:docstring>
    </property>

    <property name="CurrentChallenge" tp:name-for-bindings="Current_Challenge"
              type="ay" access="read">
      <tp:docstring>
        The current challenge from the server. change notification via
        <tp:member-ref>NewChallenge</tp:member-ref>. The handler either needs
        to respond by calling <tp:member-ref>Respond</tp:member-ref>
        (if it needs to send reply data), <tp:member-ref>Accept</tp:member-ref>
        (If the challenge contained final data) or
        <tp:member-ref>Abort</tp:member-ref> (in case of errors).
      </tp:docstring>
    </property>

    <property name="CurrentState" tp:name-for-bindings="Current_State"
              type="(uss)" tp:type="SASL_State" access="read">
      <tp:docstring>
        The current state of the authentication.
        Change notification is via the
        <tp:member-ref>StateChanged</tp:member-ref> signal.
      </tp:docstring>
    </property>

    <method name="StartMechanism" tp:name-for-bindings="Start_Mechanism">
      <arg direction="in" name="Mechanism" type="s" tp:type="SASL_Mechanism">
        <tp:docstring>
          The chosen mechanism.
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Start an authentication try using <var>Mechanism</var>, without
          sending initial data (an "initial response" as defined in RFC
          4422).</p>

        <tp:rationale>
          <p>This method is appropriate for mechanisms where the client
            cannot send anything until it receives a challenge from the
            server, such as <code>DIGEST-MD5</code>.</p>
        </tp:rationale>
      </tp:docstring>
    </method>

    <method name="StartMechanismWithData"
      tp:name-for-bindings="Start_Mechanism_With_Data">
      <arg direction="in" name="Mechanism" type="s" tp:type="SASL_Mechanism">
        <tp:docstring>
          The chosen mechanism.
        </tp:docstring>
      </arg>
      <arg direction="in" name="Initial_Data" type="ay">
        <tp:docstring>
          Initial data (an "initial response" in RFC 4422's terminology) to send
          with the mechanism.
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Start an authentication try using <var>Mechanism</var>, and send
          <var>Initial_Data</var> as the "initial response" defined in
          <a href="http://tools.ietf.org/html/rfc4422#section-3.3">RFC 4422
            §3.3</a>.</p>

        <tp:rationale>
          <p>This method is appropriate for mechanisms where the client may
            send data first, such as <code>PLAIN</code>.</p>

          <p>Having two methods allows any mechanism where it makes a difference
            to distinguish between the absence of an initial response
            (<tp:member-ref>StartMechanism</tp:member-ref>) and a zero-byte
            initial response (StartMechanismWithData, with Initial_Data
            empty).</p>
        </tp:rationale>
      </tp:docstring>
    </method>

    <method name="Respond" tp:name-for-bindings="Respond">
      <arg direction="in" name="Response_Data" type="ay">
        <tp:docstring>
          The response data.
        </tp:docstring>
      </arg>
      <tp:docstring>
        Send our response to the the
        <tp:member-ref>CurrentChallenge</tp:member-ref>, if required.
      </tp:docstring>
    </method>

    <method name="Accept" tp:name-for-bindings="Accept">
      <tp:docstring>
        Handler accepts the authentication as finished. Can be called
        whenever the Handler considered the authentication process to
        be (successfully) finished from its point of view.
      </tp:docstring>
    </method>

    <method name="Abort" tp:name-for-bindings="Abort">
      <arg direction="in" name="Reason" type="u" tp:type="Abort_Reason">
        <tp:docstring>
          Reason for abort.
        </tp:docstring>
      </arg>
      <arg direction="in" name="Debug_Message" type="s">
        <tp:docstring>
          Debug message for abort.
        </tp:docstring>
      </arg>
      <tp:docstring>
        Abort the current authentication try.
      </tp:docstring>
    </method>

    <signal name="StateChanged" tp:name-for-bindings="State_Changed">
      <tp:docstring>
        Notifies of <tp:member-ref>CurrentState</tp:member-ref> changing
      </tp:docstring>
      <arg type="u" tp:type="SASL_Status" name="Status">
        <tp:docstring>
          The status of the state.
        </tp:docstring>
      </arg>
      <arg type="s" tp:type="DBus_Error_Name" name="Reason">
        <tp:docstring>
          The reason for the state.
        </tp:docstring>
      </arg>
      <arg type="s" name="Debug_Message">
        <tp:docstring>
          A non-localized debug message.
        </tp:docstring>
      </arg>
    </signal>

    <signal name="NewChallenge" tp:name-for-bindings="New_Challenge">
      <tp:docstring>
        Recieved a new challenge from the server.
      </tp:docstring>
      <arg name="Challenge_Data" type="ay">
        <tp:docstring>
          The challenge data from the server.
        </tp:docstring>
      </arg>
    </signal>

    <tp:enum name="Abort_Reason" type="u">
      <tp:enumvalue suffix="Invalid_Challenge" value="0">
        <tp:docstring>
          Server sent an invalid challenge or data.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="User_Abort" value="1">
        <tp:docstring>
          User aborted the authentication.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:enum name="SASL_Status" type="u">
      <tp:enumvalue suffix="Not_Started" value="0">
        <tp:docstring>
          Need to call <tp:member-ref>StartMechanism</tp:member-ref> to start.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="In_Progress" value="1">
        <tp:docstring>
          Challenge/Response cycle in progress
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Server_Succeeded" value="2">
        <tp:docstring>
          Server indicated successful authentication, handler needs to call
          <tp:member-ref>Accept</tp:member-ref> or
          <tp:member-ref>Abort</tp:member-ref> to complete the authentication
          process.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Client_Accepted" value="3">
        <tp:docstring>
          Handler indicates that from its perspective the
          authentication has successfully finished.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Succeeded" value="4">
        <tp:docstring>
          Everyone is happy (the server sent success, and the client has called
          <tp:member-ref>Accept</tp:member-ref>); it is up to the handler to
          <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Channel">Close</tp:dbus-ref>
          the channel when it wishes.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Server_Failed" value="5">
        <tp:docstring>
          Server indicated an authentication failure,
          Authentication can be restarted by calling
          <tp:member-ref>StartMechanism</tp:member-ref> again or completely
          aborted by calling <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Channel">Close</tp:dbus-ref>
          on the channel.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Client_Failed" value="6">
        <tp:docstring>
          Client indicated an authentication failure,
          Authentication can be restarted by calling
          <tp:member-ref>StartMechanism</tp:member-ref> again or completely
          aborted by calling <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Channel">Close</tp:dbus-ref>
          on the channel.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:struct name="SASL_State">
      <tp:member type="u" tp:type="SASL_Status" name="Status">
        <tp:docstring>
          The status of the state.
        </tp:docstring>
      </tp:member>

      <tp:member type="s" tp:type="DBus_Error_Name" name="Reason">
        <tp:docstring>
          The reason for the state.
        </tp:docstring>
      </tp:member>

      <tp:member type="s" name="Debug_Message">
        <tp:docstring>
          A non-localized debug message.
        </tp:docstring>
      </tp:member>
    </tp:struct>
  </interface>
</node>
<!-- vim:set sw=2 sts=2 et ft=xml: -->
