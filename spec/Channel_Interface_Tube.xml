<?xml version="1.0" ?>
<node name="/Channel_Interface_Tube" xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0">
  <tp:copyright>Copyright (C) 2008 Collabora Limited</tp:copyright>
  <tp:copyright>Copyright (C) 2008 Nokia Corporation</tp:copyright>
  <tp:license>
    This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Interface.Tube">
    <tp:requires interface="org.freedesktop.Telepathy.Channel"/>
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>A "tube" is a mechanism for arbitrary data transfer. A tube channel
        can contain only one tube. This interface contains the properties,
        signals and methods common to all types of tubes. One cannot create a
        tube channel of type org.freedesktop.Telepathy.Channel.Interface.Tube
        but only channels of a specific type tube channel. Only stream and
        D-Bus tubes exist currently. They have their own interface and their
        interface can be used to create a tube channel.</p>

      <p>The Tubes channel type may be requested for handles of type
        HANDLE_TYPE_CONTACT and HANDLE_TYPE_ROOM.</p>
    </tp:docstring>

    <tp:enum name="Tube_Type" type="u">
      <tp:enumvalue suffix="DBus" value="0">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>An ordered reliable transport, for transporting D-Bus
            traffic.</p>

          <p>For each D-Bus tube, the connection manager listens on a D-Bus
            server address, as detailed in the D-Bus specification. On this
            address, it emulates a bus upon which each tube participant appears
            as an endpoint.</p>

          <p>The objects and interfaces which are expected to exist on the
            emulated bus depend on the well-known name; typically, either the
            participant who initiated the tube is expected to export the same
            objects/interfaces that would be exported by a service of that name
            on a bus, or all participants are expected to export those
            objects/interfaces.</p>

          <p>In a multi-user context (Handle_Type_Room) the tube behaves
            like the D-Bus bus daemon, so participants can send each other
            private messages, or can send broadcast messages which are
            received by everyone in the tube (including themselves).
            Each participant has a D-Bus unique name; connection managers
            must prevent participants from sending messages with the wrong
            sender unique name, and should attempt to avoid participants
            receiving messages not intended for them.</p>

          <p>In a 1-1 context (Handle_Type_Contact) the tube behaves like
            a peer-to-peer D-Bus connection - arbitrary D-Bus messages with
            any sender and/or destination can be sent by each participant,
            and each participant receives all messages sent by the other
            participant.</p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Stream" value="1">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>A transport for ordered, reliable data transfer, similar to
            SOCK_STREAM sockets.</p>

          <p>When accepting a Stream Unix tube, a new listening local socket is
            created. Each time the client connects to this socket, the
            connection manager of the initiator of the tube opens a new
            connection to its local socket. Both sides can then use this pair
            of sockets to communicate together.</p>
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <property name="Initiator" type="u" tp:type="Contact_Handle" access="read">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Initiator handle.</p>
      </tp:docstring>
    </property>

    <property name="TubeType" type="u" tp:type="Tube_Type" access="read">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Type of the tube.</p>
      </tp:docstring>
    </property>

    <property name="Service" type="s" access="read">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Each tube has a service name, which is a string specifying the
          kind of communication that takes place over it.</p>
      </tp:docstring>
    </property>

    <property name="Parameters" type="a{sv}" tp:type="String_Variant_Map"
              access="read">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Each tube has a dictionary of arbitrary parameters. Parameters are
          commonly used for bootstrap information such as usernames and
          passwords.</p>
      </tp:docstring>
    </property>

    <tp:enum name="Tube_Channel_State" type="u">
      <tp:enumvalue suffix="Local_Pending" value="0">
        <tp:docstring>
          The tube is waiting to be accepted/closed locally.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Remote_Pending" value="1">
        <tp:docstring>
          The tube is waiting to be accepted/closed remotely.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Open" value="2">
        <tp:docstring>
          The tube is open for traffic.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Not_Offered" value="3">
        <tp:docstring>
          The tube is not yet offered.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <signal name="TubeChannelStateChanged">
      <tp:docstring>
        Emitted when the state of the tube channel changes.
      </tp:docstring>
      <arg name="state" type="u" tp:type="Tube_Channel_State">
        <tp:docstring>
          The new state of the tube; see the Tube_Channel_State enumeration.
        </tp:docstring>
      </arg>
    </signal>

  </interface>

</node>
<!-- vim:set sw=2 sts=2 et ft=xml: -->
