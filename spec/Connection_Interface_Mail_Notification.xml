<?xml version="1.0" ?>
<node name="/Connection_Interface_Mail_Notification"
  xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0"
  >
  <tp:copyright> Copyright (C) 2007 Collabora Limited </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface
    name="org.freedesktop.Telepathy.Connection.Interface.MailNotification.DRAFT"
    tp:causes-havoc="experimental">
    <tp:requires interface="org.freedesktop.Telepathy.Connection"/>

    <tp:flags name="Mail_Notification_Flags" value-prefix="Mail_Notification_Flag" type="u" >
      <tp:flag suffix="Supports_Unread_Mail_Count" value="1">
        <tp:docstring>
          This Connection provides the number of unread e-mails (or e-mail
          threads) in the main folder of your e-mail account, as the
          <tp:member-ref>UnreadMailCount</tp:member-ref> property. The
          connection manager will update this value by emitting the
          <tp:member-ref>UnreadMailsChanged</tp:member-ref> signal.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Supports_Unread_Mails" value="2">
        <tp:docstring>
          This Connection provides a detailed list of unread e-mails, as the
          <tp:member-ref>UnreadMails</tp:member-ref> property. If this flag
          is set, <tt>Supports_Unread_Mail_Count</tt> MUST be set, and
          <tt>Emits_Mails_Received</tt> MUST NOT be set.
          The Connection will update the list by emitting the
          <tp:member-ref>UnreadMailsChanged</tp:member-ref> signals.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Emits_Mails_Received" value="4">
        <tp:docstring>
          This Connection emits the <tp:member-ref>MailsReceived</tp:member-ref>
          signal, which provides details about newly arrived e-mails but does
          not maintain their read/unread status afterwards. This flag MUST NOT
          be combined with <tt>Supports_Unread_Mails</tt>.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Supports_Request_Inbox_URL" value="8">
        <tp:docstring>
          This Connection can provide a URL (with optional POST data) to
          open the the inbox of the e-mail account in a web-based client, via
          the <tp:member-ref>RequestInboxURL</tp:member-ref> method. It is
          strongly advised to set this flag if
          <tt>Supports_Unread_Mail_Count</tt> is set.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Supports_Request_Mail_URL" value="16">
        <tp:docstring>
          This Connection can provide a URL (with optional POST data) to open
          a specific mail in a web-based client, via the
          <tp:member-ref>RequestMailURL</tp:member-ref> method. It is
          strongly advised to set this flag if
          <tt>Supports_Unread_Mails</tt> or <tt>Emits_Mails_Received</tt>
          is set.
          <tp:rationale>
            If possible client SHOULD fallback to
            <tp:member-ref>RequestInboxURL</tp:member-ref> if
            <tt>Supports_Request_Mail_URL</tt> is not set.
          </tp:rationale>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Supports_Request_Compose_URL" value="32">
        <tp:docstring>
          The CM provides an URL (with optional POST data) to compose a new
          e-mail in a web-based client, via the
          <tp:member-ref>RequestComposeURL</tp:member-ref> method.
          This flag is optional and does not depend on any other flags.
        </tp:docstring>
      </tp:flag>
      <tp:docstring>
        <p>Flags representing capabilities provided by a connection manager.
          Those values can be used as bitfield. Some flags depend on, or
          conflict with, each other. While it's not mandatory, it is
          strongly advised that <tt>Supports_Request_Inbox_URL</tt> flag is
          set to ensure that there is a way to open unread messages.</p>
      </tp:docstring>
    </tp:flags>

    <tp:enum name="HTTP_Method" type="u">
      <tp:enumvalue suffix="Get" value="0">
        <tp:docstring>
          Use the GET method when opening the URL.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Post" value="1">
        <tp:docstring>
          Use the POST method when opening the URL. Refer to
          <tp:type>HTTP_Post_Data</tp:type> for more details.
        </tp:docstring>
      </tp:enumvalue>
      <tp:docstring>
        The HTTP Method with which to request a URL.
      </tp:docstring>
    </tp:enum>

    <tp:struct name="HTTP_Post_Data" array-name="HTTP_Post_Data_List">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A pair (key, value) representing POST data compatible with the
        application/x-www-form-urlencoded MIME type. The strings MUST be
        valid UTF-8 strings, and the characters used in the key MUST obey
        the requirements of the
        <a href="http://www.w3.org/TR/html401/types.html#type-cdata">
          HTML CDATA type</a>. The value MUST NOT be
        encoded with HTML entities.</p>

        <p>For example, if the POST data should contain a key "less-than" with value
        "&lt;", and a key "percent" with value "%", this should be represented as
        two HTTP_Post_Data structures, ("less-than", "&lt;") and ("percent", "%"),
        resulting in a POST request whose request body is "less-than=&amp;lt;&amp;percent=%25".
        If a client passes this to a browser by writing it into an HTML form, it
        could do so by representing it as:</p>
  
        <pre>
        &lt;input type="hidden" name="less-than"&gt;&amp;lt;&lt;/input&gt;
        &lt;input type="hidden" name="percent"&gt;%&lt;/input&gt;
        </pre>

        <tp:rationale>
          <p>This data can be used to generate a HTML file that will
            automatically load the URL with appropriate POST data, in which case
            the client MUST convert any characters that are special within HTML
            into HTML entities. Alternatively, it can be used in an API that will
            instruct the browser how to load the URL (like the Netscape Plug-in
            API), in which case the client MUST escape
            <a href="http://www.ietf.org/rfc/rfc1738.txt">characters that are
              reserved in URLs</a>, if appropriate for that API.</p>

          <p>An array of pairs is used instead of a map from keys to values,
            because it's valid to repeat keys in both HTML and
            x-www-form-urlencoded data.</p>
        </tp:rationale>
      </tp:docstring>
      <tp:member type="s" name="Key">
        <tp:docstring>The key, corresponding to a HTML control
          name</tp:docstring>
      </tp:member>
      <tp:member type="s" name="Value">
        <tp:docstring>The value</tp:docstring>
      </tp:member>
    </tp:struct>

    <tp:struct name="Mail_Address" array-name="Mail_Address_List">
      <tp:docstring>
        A pair (name, address) representing an e-mail address,
        such as ("Nicolas Dufresne", "nicolas.dufresne@collabora.co.uk").
      </tp:docstring>
      <tp:member type="s" name="Name">
        <tp:docstring>The displayed name corresponding to the e-mail
          address</tp:docstring>
      </tp:member>
      <tp:member type="s" name="Address">
        <tp:docstring>The actual e-mail address</tp:docstring>
      </tp:member>
    </tp:struct>

    <!-- FIXME: should this be Mail_Notification_Type? -->
    <tp:enum name="Mail_Type" type="u">
      <tp:enumvalue suffix="Single" value="0">
        <tp:docstring>
          The <tp:type>Mail</tp:type> represents a single message, sent by
          a single sender.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Thread" value="1">
        <tp:docstring>
          The <tp:type>Mail</tp:type> represents a thread of e-mails, which
          MAY have more than one sender.
        </tp:docstring>
      </tp:enumvalue>
      <tp:docstring>
        <p>The type of a mail notification.</p>

        <tp:rationale>
          <p>Google Talk notifies users about new mail in terms of unread
            threads, rather than unread e-mails.</p>
        </tp:rationale>
      </tp:docstring>
    </tp:enum>

    <tp:struct name="Mail_URL">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A structure containing the required information to open a web-based
          e-mail UI without needing re-authentication.</p>

        <p>Because the URL and POST data frequently contain short-lived
          credential tokens, a new URL should be requested (by calling one of
          the methods that returns a Mail_URL) for each visit to the web-based
          UI, and the URL should be visited soon after it is returned.</p>
      </tp:docstring>
      <tp:member type="s" name="URL">
        <tp:docstring>
          The URL to which to send a request.
        </tp:docstring>
      </tp:member>
      <tp:member type="u" name="Method" tp:type="HTTP_Method">
        <tp:docstring>
          The HTTP method of the request.
        </tp:docstring>
      </tp:member>
      <tp:member type="a(ss)" name="Post_Data" tp:type="HTTP_Post_Data[]">
        <tp:docstring>
          An array of name-value pairs containing the POST data to use when
          opening the URL. This MUST be an empty array if the Method is not
          POST.
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <tp:mapping name="Mail" array-name="Mail_List">
      <tp:docstring>
        An extensible map representing a mail or a thread of mails.
        All keys are optional where not otherwise stated; however, at least
        one of "senders" and "subject" must be included.
      </tp:docstring>

      <tp:member type="s" name="Key">
        <tp:docstring>
          <p>A key providing information about the mail or thread. Well-known
            keys are as follows:</p>

        <dl>
          <dt>id &#8212; s</dt>
          <dd>
            A unique ID for this e-mail. CMs with <tt>Supports_Unread_Mails</tt>
            set in <tp:member-ref>Capabilities</tp:member-ref> MUST provide this
            key in each <tp:type>Mail</tp:type>. If provided, the ID MUST be
            unique within the lifetime of the Connection.
          </dd>

          <dt>type &#8212; u (<tp:type>Mail_Type</tp:type>)</dt>
          <dd>
            The type of notification. If omitted, Mail_Type_Single MAY be
            assumed. For protocols where notifications are about threads
            rather than individual mails, this MUST be set to Mail_Type_Thread.
          </dd>

          <dt>url-data &#8212; s</dt>
          <dd>An opaque string provided to the Connection when
            calling <tp:member-ref>RequestMailURL</tp:member-ref>,
            containing information used by the Connection to build the URL.
          </dd>

          <dt>senders &#8212; a(ss) (<tp:type>Mail_Address</tp:type>)</dt>
          <dd>
            An array of sender display name and e-mail address pairs. Note that
            only e-mails represented as a thread can have multiple senders.
          </dd>

          <dt>to-addresses &#8212; a(ss) (<tp:type>Mail_Address</tp:type>)</dt>
          <dd>
            An array of display name and e-mail address pairs representing
            the recipients.
          </dd>

          <dt>cc-addresses &#8212; a(ss) (<tp:type>Mail_Address</tp:type>)</dt>
          <dd>
            An array of display name and e-mail address pairs representing
            the carbon-copy recipients.
          </dd>

          <dt>sent-timestamp &#8212; x (<tp:type>Unix_Timestamp64</tp:type>)</dt>
          <dd>A UNIX timestamp indicating when the message was sent.
            <!-- FIXME: what does this mean for a thread? -->
          </dd>

          <dt>received-timestamp &#8212; x (<tp:type>Unix_Timestamp64</tp:type>)</dt>
          <dd>A UNIX timestamp indicating when the message was received.
            <!-- FIXME: what does this mean for a thread? -->
          </dd>

          <dt>has-attachments &#8212; b</dt>
          <dd>If true, this mail has attachments.</dd>

          <dt>subject &#8212; s</dt>
          <dd>
            The subject of the message. This MUST be encoded in UTF-8.
          </dd>

          <dt>content-type &#8212; s</dt>
          <dd>
            <p>The MIME type of the message content. Two types are currently
              supported: "text/plain" for plain text, and "text/html" for a
              HTML document. If omitted, "text/plain" MUST be assumed.
              Regardless of MIME type, the content MUST be valid UTF-8 (which
              may require that the Connection transcodes it from a legacy
              encoding).</p>

            <tp:rationale>
              <p>All strings on D-Bus must be UTF-8.</p>
            </tp:rationale>
          </dd>

          <dt>truncated &#8212; b</dt>
          <dd>
            If true, the content is only a partial message; if false or
            omitted, the content is the entire message.
          </dd>

          <dt>content &#8212; s</dt>
          <dd>
            The body of the message, possibly truncated, encoded as appropriate
            for "content-type".
          </dd>

          <dt>folder &#8212; s</dt>
          <dd>
            The name of the folder containing this e-mails.
            If omitted, the inbox SHOULD be assumed.
          </dd>
        </dl>
        </tp:docstring>
      </tp:member>

      <tp:member name="Value" type="v">
        <tp:docstring>The value, of whatever type is appropriate for the
          key.</tp:docstring>
      </tp:member>
    </tp:mapping>

    <property name="Capabilities" type="u" access="read"
      tp:type="Mail_Notification_Flags" tp:name-for-bindings="Capabilities">
      <tp:docstring>
        Integer representing the bitwise-OR of supported features for e-mails
        notification on this server. This property MUST NOT change after the
        Connection becomes CONNECTED.

        <tp:rationale>
          This property indicates the behavior and availability
          of the other properties and signals within this interface. A
          connection manager that cannot at least set one of the flags
          in the <tp:type>Mail_Notification_Flags</tp:type>
          SHOULD NOT provide this interface.
        </tp:rational>
      </tp:docstring>
    </property>

    <property name="UnreadMailCount" type="u" access="read"
      tp:name-for-bindings="Unread_Mail_Count">
      <tp:docstring>
        The number of unread messages in the Inbox. Change notification is via
        <tp:member-ref>UnreadMailsChanged</tp:member-ref>. This property is
        only useful if <tt>Supports_Unread_Mail_Count</tt> is set in the
        <tp:member-ref>Capabilities</tp:member-ref>; otherwise, it MUST be
        zero.
      </tp:docstring>
    </property>

    <property name="UnreadMails" type="aa{sv}" tp:type="Mail[]"
      tp:name-for-bindings="Unread_Mails" access="read">
      <tp:docstring>
        A array of unread <tp:type>Mail</tp:type>s. Change notification is via
        <tp:member-ref>UnreadMailsChanged</tp:member-ref>. This property is
        only useful if <tt>Supports_Unread_Mails</tt> is set in
        <tp:member-ref>Capabilities</tp:member-ref>; otherwise, it MUST be
        an empty list.
      </tp:docstring>
    </property>

    <signal name="MailsReceived" tp:name-for-bindings="Mails_Received">
      <arg name="Mails" type="aa{sv}" tp:type="Mail[]">
        <tp:docstring>
          An array of <tp:type>Mail</tp:type>s. Those e-mail MAY NOT have the
          "id" key or MAY have an "id" key that is not unique.
          <tp:rationale>
            In this context, the "id" key does not make much sense since
            e-mails will only be sent once. CMs may still set it to put
            additional information for method 
            <tp:member-ref>RequestMailURL</tp:member-ref>.
          </tp:rationale>
        </tp:docstring>
      </arg>

      <tp:docstring>
        Emitted when new e-mails messages arrive to the inbox associated with
        this connection. This signal is used for protocols that are not able
        to maintain the <tp:member-ref>UnreadMails</tp:member-ref> list, but
        do provide real-time notification about newly arrived e-mails. It MUST
        NOT be emitted unless <tt>Emits_Mails_Received</tt> is set in
        <tp:member-ref>Capabilities</tp:member-ref>.
      </tp:docstring>
    </signal>

    <signal name="UnreadMailsChanged"
      tp:name-for-bindings="Unread_Mails_Changed">
      <arg name="Count" type="u">
        <tp:docstring>
          Number of unread messages in the inbox (the new value of
          <tp:member-ref>UnreadMailCount</tp:member-ref>).
        </tp:docstring>
      </arg>
      <arg name="Mails_Added" type="aa{sv}" tp:type="Mail[]">
        <tp:docstring>
          A list of <tp:type>Mail</tp:type> that are being added or updated in
          <tp:member-ref>UnreadMails</tp:member-ref>. This list MAY be
          empty even if Count has increased, if the
          <tt>Supports_Unread_Mails</tt> flag is not set.

          <tp:rationale>
            Mails may be updated when the URL information (URL and POST data)
            have changed, or senders were added or removed from an e-mail
            thread (see <tp:type>Mail_Type</tp:type>_Thread).
          </tp:rationale>
        </tp:docstring>
      </arg>
      <arg name="Mails_Removed" type="as">
        <tp:docstring>
          A list of e-mail IDs that are being removed from
          <tp:member-ref>UnreadMails</tp:member-ref>. This list MAY be
          empty even if Count has decreased, if the
          <tt>Supports_Unread_Mails</tt> flag is not set.
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Emitted when <tp:member-ref>UnreadMails</tp:member-ref> or
          <tp:member-ref>UnreadMailCount</tp:member-ref> have changed. It MUST
          NOT be emited if <tt>Supports_Unread_Mail_Count</tt> flag is not set
          in <tp:member-ref>Capabilities</tp:member-ref>.</p>

        <p><tt>Mails_Added</tt> and
          <tt>Mails_Removed</tt> MUST be empty if the
          <tt>Supports_Unread_Mails</tt> flag is not set.</p>
        <!-- FIXME: is that true? -->
      </tp:docstring>
    </signal>

    <method name="Subscribe"
        tp:name-for-bindings="Subscribe">
      <tp:docstring>
        <p>This method subscribes a client to the notification interface. This
          MUST be called by clients before using this interface.</p>

        <p>The Connection tracks a subscription count (like a refcount) for
          each unique bus name that has called Subscribe(). When a client calls
          Unsubscribe(), it releases one "reference". If a client exits
          (or crashes), the Connection releases all "references" held on its
          behalf.</p>

        <tp:rationale>
          <p>The reference count imposed on the subscription simplifies
            implementation of client running in the same process
            (e.g. plug-ins): two plug-ins interested in mail notification can
            call Subscribe and Unsubscribe independently without interfering
            with each other.</p>

          <p>This method exists to reduce memory and network overhead when
            there is no active subscription. An example of a protocol that
            benefits from this method is the Google XMPP Mail Notification
            extension: in this protocol, the CM receives a notification
            that something has changed, but to get more information, the CM
            must request this information. Knowing that nobody is currently
            interested in this information, the CM can avoid generating
            useless network traffic. Similarly, the CM may free
            the list of unread messages to reduce memory overhead.</p>
        </tp:rationale>

      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <!-- FIXME: why would these errors be raised? -->
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
      </tp:possible-errors>
    </method>

    <method name="Unsubscribe"
        tp:name-for-bindings="Unsubscribe">
      <tp:docstring>
        This method unsubscribes a client from the notification interface.
        This SHOULD be called by each client that has successfully called
        Subscribe when it no longer needs the mail notification interface.

        <tp:rationale>
          See <tp:member-ref>Subscribe</tp:member-ref> for rationale.
        </tp:rationale>
      </tp:docstring>
      <tp:possible-errors>
        <!-- FIXME: why would this ever raise an error? -->
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
      </tp:possible-errors>
    </method>

    <method name="RequestInboxURL"
      tp:name-for-bindings="Request_Inbox_URL">
      <arg direction="out" name="URL" type="(sua(ss))" tp:type="Mail_URL" >
        <tp:docstring>
          A struture containing a URL and optional additional data to open a
          webmail client without re-authentication.
        </tp:docstring>
      </arg>
      <tp:docstring>
        This method creates and returns a URL and an optional POST data that
        allow opening the Inbox folder of a webmail account. This URL MAY
        contain tokens with a short lifetime, so clients SHOULD request a new
        URL for each visit to the webmail interface. This method is implemented
        only if the <tt>Supports_Request_Inbox_URL</tt> flag is set in
        <tp:member-ref>Capabilities</tp:member-ref>.

        <tp:rationale>
          We are not using properties here because the tokens are unsuitable
          for sharing between clients, and network round-trips may be required
          to obtain the information that leads to authentication free webmail
          access.
        </tp:rationale>
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented"/>
      </tp:possible-errors>
    </method>

    <method name="RequestMailURL"
      tp:name-for-bindings="Request_Mail_URL">
      <arg direction="in" name="ID" type="s">
        <tp:docstring>
          The mail's <tt>id</tt> as found in the <tp:type>Mail</tp:type>
          structure, or the empty string if no <tt>id</tt> key was provided.
        </tp:docstring>
      </arg>
      <arg direction="in" name="URL_Data" type="s">
        <tp:docstring>
          The <tt>url-data</tt> as found in the <tp:type>Mail</tp:type>
          structure, or the empty string if no <tt>url-data</tt> key was
          provided.
        </tp:docstring>
      </arg>
      <arg direction="out" name="URL" type="(sua(ss))" tp:type="Mail_URL" >
        <tp:docstring>
          A struture that contains a URL and optional additional data to open a
          webmail client without re-authentication.
        </tp:docstring>
      </arg>
      <tp:docstring>
        This method creates and returns a URL and optional POST data that
        allow opening a specific mail in a webmail interface. This
        method is implemented only if <tt>Supports_Request_Mail_URL</tt> flag
        is set in <tp:member-ref>Capabilities</tp:member-ref>.
        <tp:rationale>
          See <tp:member-ref>RequestInboxURL</tp:member-ref> for design
          rationale.
        </tp:rationale>
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented"/>
      </tp:possible-errors>
    </method>

    <method name="RequestComposeURL"
      tp:name-for-bindings="Request_Compose_URL">
      <arg direction="out" name="URL" type="(sua(ss))" tp:type="Mail_URL" >
        <tp:docstring>
          A struture that contains a URL and optional additional data to open
          a webmail client without re-authentication.
        </tp:docstring>
      </arg>
      <tp:docstring>
        This method assembles and returns a URL and optional POST data that
        allow opening the mail composition page of a webmail interface.
        This method is implemented only if the
        <tt>Supports_Request_Compose_URL</tt>
        flag is set in <tp:member-ref>Capabilities</tp:member-ref>.
        <tp:rationale>
          The goal is to allow a webmail user to have the same level of
          integration as if they were using a native mail client.
        </tp:rationale>
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented"/>
      </tp:possible-errors>
    </method>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>An interface to support receiving notifications about a e-mail
        account associated with this connection. It is intended that the
        connection manager has the means to provide necessary information
        so that the client is always able to open a web based mail client
        without having to re-authenticate.
      </p>
      <p>
        To use this interface, a client MUST first subscribe using the
        <tp:member-ref>Subscribe</tp:member-ref> method. The subscription
        mechanic aims at reducing network traffic and memory footprint in the
        situation where nobody is currently interesting in provided
        information.
      </p>
      <p>
        Protocol often have different level of Mail Notification support. To
        make it more explicit, the interface provides a property called
        <tp:member-ref>Capabilities</tp:member-ref>. Possible value are
        described by <tp:type>Mail_Notification_Flags</tp:type>. Not all
        combinations are valid. We can regroup the mail notification in four
        different combinations.
      </p>
      <p>
        <b>1) Supports_Unread_Mail_Count only:</b>
        <br/>
        This flag is generally combined with other flags, but provides
        sufficient information to be usefull. The mail count is supported
        by most protocols including MSN, Yahoo and Google Talk. It allows 
        a UI to permanantly display messages like 'GMail: 4 unread messages'.
      </p>
      <p>
        <b>2) Emist_Mails_Received only:</b>
        <br/>
        In this case, the CM does not keep track of any mails. It simply emits
        information whenever they arrived to it. Those events may be used for
        short term display (like notification popup) to inform the user. No
        protocol is known to only supported this single feature, but it is
        useful for certain library integration that does not implement
        tracking of count or have a buggy counter implementation.
        <tp:rationale>
          It's always better to remove a feature then enabling one that does
          not behave properly.
        </tp:rationale>
      </p>
      <p>
        <b>3) Supports_Unread_Mail_Count and Supports_Unread_Mails:</b>
        <br/>
        This allow full state recovery of unread mail status. It is provided
        by Google XMPP Mail Notification Extension. With this set of flag,
        a client could have same display has case 1, and have let's say a
        plus button to show more detailed information. Refer to
        <tp:type>Mail</tp:type> documentation for the list of details that
        MAY be provided.
      </p>
      <p>
        <b>4) Supports_Unread_Mail_Count and Emits_Mails_Received</b>
        <br/>
        This is the most common level of support, it is provided by protocols
        like MSN and Yahoo. This would result in a combination of case 1 and 2
        where the client could display a counter and real-time notification.
      </p>
      <p>
        In case 1, 3 and 4, client SHOULD connect to signal
        <tp:member-ref>UnreadMailsChanged</tp:member-ref> to get updated with
        latest value of <tp:member-ref>UnreadMailCount</tp:member-ref>. In
        case 3, this signal also provides updates of
        <tp:member-ref>UnreadMails</tp:member-ref> property.
      </p>
      <p>
        In case 2 and 4, client MAY connect to signal
        <tp:member-ref>MailsReceived</tp:member-ref> to get real-time
        notification about newly arrived e-mails.
      </p>
      <p>
        Other independant features promoted within the
        <tp:member-ref>Capabilities</tp:member-ref> are the RequestSomethingURL
        methods. Those requests are used to obtain authentication free URL that
        will allow client to open web base mail client. Those capabilities
        are all optional, but flag <tt>Supports_Request_Inbox_URL</tt> is
        recommanded for case 1, 3 and 4. Flag 
        <tt>Supports_Request_Mail_URL</tt> is mostly usefull for case 1, 3
        and 4, but client SHOULD fallback to Inbox URL if missing. Finally,
        flag <tt>Supports_Request_Compose_URL</tt> is a special feature that
        allow accessing the mail creation web interface with a single click.
        This feature is simply optional.
      </p>
      <p>
        When done with this interface, client SHOULD call
        <tp:member-ref>Unsubscribe</tp:member-ref>. If no more clients are
        subscribed, the CM will then be able to free any uneeded memory and
        reduce network traffic.
      </p>
    </tp:docstring>
  </interface>
</node>
<!-- vim:set sw=2 sts=2 et ft=xml: -->

