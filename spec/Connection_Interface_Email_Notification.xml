<?xml version="1.0" ?>
<node name="/Connection_Interface_Mail_Notification"
  xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0"
  >
  <tp:copyright> Copyright (C) 2007 Collabora Limited </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface
    name="org.freedesktop.Telepathy.Connection.Interface.EmailNotification.DRAFT"
    tp:causes-havoc="experimental">
    <tp:requires interface="org.freedesktop.Telepathy.Connection"/>

    <tp:enum name="HTTP_Method" type="u"> 
      <tp:enumvalue suffix="Get" value="0">
        <tp:docstring>
          Use GET method when opening the URL.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Post" value="1">
        <tp:docstring>
          Use POST method when opening the URL.
        </tp:docstring>
      </tp:enumvalue>
      <tp:docstring>
        HTTP Method.
      </tp:docstring>
    </tp:enum>

    <tp:enum name="Email_Type" type="u"> 
      <tp:enumvalue suffix="single" value="0">
        <tp:docstring>
          The e-mail is represented as a single reply by only
          one sender.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="thread" value="1">
        <tp:docstring>
          The e-mail refer to a thread where multiple person may
          have replied.
        </tp:docstring>
      </tp:enumvalue>
      <tp:docstring>
        E-mail representation type.
      </tp:docstring>
    </tp:enum>


    <tp:simple-type name="Email" type="a{sv}" array-name="Email_List">
      <tp:docstring>
        E-mail representation has been reduced to hash table with possible keys (of type strings) 
        listed above. All keys are optional except the "id" key that must be provided by every 
        protocol that support unread mail listing. Without this key, it would not be impossible to 
        unlist the e-mails that are no longer marked as unread.
      
        <dl>
          <dt>u:id</dt>
          <dd>A unique ID for this email</dd>

          <dt>u:type (see <tp:type>Email_Type</tp:type>)</dt>
          <dd>
            Type of e-mail. This can be set to "single", which means e-mails 
            are represented separately, or "thread", when information is described
            by the protocol as thread. Note that threads may have multiple unread senders.
          </dd>

          <dt>s:url</dt>
          <dd>This URL should allow client to load this precise message.</dd>

          <dt>u:method (see <tp:type>HTTP_Method</tp:type>)</dt>
          <dd>
            The HTTP method to use when opening URL. If unset, GET
            is assumed.
          </dd>

          <dt>a(ss):post-data</dt>
          <dd>
            When method is POST, this data must be sent along with the POST request. 
            It is a list of key/value pair with string for both keys and values.
          </dd>

          <dt>as:cookies</dt>
          <dd>Cookies to set when loading the URL.</dd>

          <dt>a(ss):senders</dt>
          <dd>
            An array of sender display name and e-mail address pair. Note that 
            only e-mails thread may have multiple senders.
          </dd>

          <dt>a(ss):to-addresses</dt>
          <dd>
            An array of display name and e-mail address pair of
            the recipients.
          </dd>

          <dt>a(ss):cc-addresses</dt>
          <dd>
            An array of display name and e-mail address pair of the carbon
            copy recipients.
          </dd>

          <dt>s:subject</dt>
          <dd>The subject of the message.</dd>

          <dt>u:sent-timestamp</dt>
          <dd>A UNIX timestamp of when the message has been sent.</dd>

          <dt>u:received-timestamp</dt>
          <dd>A UNIX timestamp of when the message has been received.</dd>

          <dt>b:has-attachments</dt>
          <dd>A boolean of whether this message has attachments.</dd>

          <dt>s:priority</dt>
          <dd>Priority of the message (1, 2, 3, low, medium, high, ...)</dd>

          <dt>s:content-type</dt>
          <dd>MIME type of the message contents.</dd>

          <dt>s:snippet</dt>
          <dd>
            A small part of the message body (content-type should
            be set if this message is HTML encoded).
          </dd>

          <dt>s:body</dt>
          <dd>
            The body of the message (content-type should
            be set if this message is HTML encoded).
          </dd>

          <dt>s:folder</dt>
          <dd>
            The name of the folder containing this emails. 
            If unset, inbox will be assumed.
          </dd>
        </dl>
      </tp:docstring>
    </tp:simple-type>
   
    <property name="UnreadEmailCount" type="u" access="read"
      tp:name-for-bindings="Unread_Email_Count">
      <tp:docstring>
        The number of unread messages in the inbox.
      </tp:docstring>
    </property>

    <property name="InboxURL" type="s" tp:name-for-bindings="Inbox_URL"
      access="read">
      <tp:docstring>
          URL of the inbox.
      </tp:docstring>
    </property>

    <property name="Method" type="u" tp-type="HTTP_Method" 
      tp:name-for-bindings="Method" access="read">
      <tp:docstring>
          HTTP Method to use along with <tp:member-ref>InboxURL</tp:member-ref>.
      </tp:docstring>
    </property>

    <property name="Cookies" type="as" tp:name-for-bindings="Cookies"
      access="read">
      <tp:docstring>
        Array of the cookies to use when opening the 
        <tp:member-ref>InboxURL</tp:member-ref>.
        (a cookie is a string, e.g. "session=1; path=/; domain=toto.com")
      </tp:docstring>
    </property>

    <property name="PostData" type="a(ss)" tp:name-for-bindings="Post_Data"
      access="read">
      <tp:docstring>
        Array of key/value pairs of the POST data to send when opening the
        <tp:member-ref>InboxURL</tp:member-ref>. This should be ignored if 
        <tp:member-ref>Method</tp:member-ref> is not "POST".
      </tp:docstring>
    </property>

    <property name="UnreadEmails" type="a(sv)" tp-type="Email_List"
      tp:name-for-bindings="Unread_Emails" access="read">
      <tp:docstring>
        A array of unread <tp:type>Email</tp:type>s.
      </tp:docstring>
    </property>

    <signal name="EmailsReceived" tp:name-for-bindings="Emails_Received">
      <arg name="emails" type="a(sv)" tp-type="Email_List">
        <tp:docstring>
          An array of <tp:type>Email</tp:type>s. Those e-mails do not have a unique "ID".
        </tp:docstring>
      </arg>

      <tp:docstring>
        Emitted when new e-mails messages arrive to the inbox associated with
        this connection. This signal is used for protocol that are not able
        to maintained <tp:member-ref>UnreadEmails</tp:member-ref> list but
        receives real-time notification about newly arrived emails.
      </tp:docstring>
    </signal>

    <signal name="UnreadEmailsAdded"
      tp:name-for-bindings="Unread_Emails_Added">
      <arg name="count" type="u">
        <tp:docstring>
          Number of unread messages in the inbox (the new value of
          <tp:member-ref>UnreadEmailCount</tp:member-ref>).
        </tp:docstring>
      </arg>
      <arg name="emails" type="a(a(sv))" tp-type="Email_List">
        <tp:docstring>
          A list of <tp:type>Email</tp:type> that are being added to
          <tp:member-ref>UnreadEmails</tp:member-ref>. This list will be
          empty if the protocol does not support listing unread e-mails
          or threads.
        </tp:docstring>
      </arg>
    </signal>

    <signal name="UnreadEmailsRemoved"
      tp:name-for-bindings="Unread_Emails_Removed">
      <arg name="count" type="u">
        <tp:docstring>
          Number of unread messages in the inbox (the new value of
          <tp:member-ref>UnreadEmailCount</tp:member-ref>).
        </tp:docstring>
      </arg>
        <arg name="emails" type="a(u)">
        <tp:docstring>
          A list of emails ID that are being removed from
          <tp:member-ref>UnreadEmails</tp:member-ref>. This list will be
          empty if the protocol does not support listing unread e-mails
          or threads.
        </tp:docstring>
      </arg>
    </signal>

    <signal name="InboxURLChanged"
      tp:name-for-bindings="Inbox_URL_Changed">
      <arg name="url" type="s">
        <tp:docstring>
          URL of the inbox (the new value of
          <tp:member-ref>InboxURL</tp:member-ref>).
        </tp:docstring>
      </arg>
      <arg name="method" type="u">
        <tp:docstring>
          HTTP Method for opening inbox URL (the new value of
          <tp:member-ref>Method</tp:member-ref>).
        </tp:docstring>
      </arg>
      <arg name="cookies" type="as">
        <tp:docstring>
          Array of strings of the cookies to use when opening
          the inbox, if any (the new value of
          <tp:member-ref>Cookies</tp:member-ref>).
        </tp:docstring>
      </arg>
      <arg name="post_data" type="a(ss)">
        <tp:docstring>
          Array of name-value pair structs of the POST data to use when opening
          the inbox, if any (the new value of
          <tp:member-ref>PostData</tp:member-ref>).
        </tp:docstring>
      </arg>
      <tp:docstring>
        Emitted when the unread message status for the user's inbox changes or
        the value has been initially received from the IM server.
      </tp:docstring>
    </signal>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>An interface to support receiving notifications about a e-mail
        account associated with this connection. It is intended that the
        connection manager has the means to provide necessary
        information (URL, method, cookies, POST data) so that the client is 
        able to open the user's inbox and possibly individual messages without 
        having to re-authenticate.</p>

      <p>When unread e-mails arrive into the inbox, the
        <tp:member-ref>UnreadEmailsAdded</tp:member-ref> signal
        will be emitted with the new value of
        <tp:member-ref>UnreadEmailCount</tp:member-ref> and when
        available the detailed list of new emails. When some e-mails are
        no longer unread, the
        <tp:member-ref>UnreadEmailsRemoved</tp:member-ref> signal
        will be emitted with the new values of
        <tp:member-ref>UnreadEmailCount</tp:member-ref> and when
        available the list of removed e-mail unique IDs. If any
        information about how to open the inbox is changed, the
        <tp:member-ref>InboxURLChanged</tp:member-ref> signal will be
        emitted with the new value of
        <tp:member-ref>InboxURL</tp:member-ref>,
        <tp:member-ref>Method</tp:member-ref>,
        <tp:member-ref>PostData</tp:member-ref> and
        <tp:member-ref>Cookies</tp:member-ref>.
      </p>
      <p>
        Some protocol may not be able to provide a list of unread e-emails
        but may provide some information about the messages received. On
        such protocols, the <tp:member-ref>EmailsReceived</tp:member-ref>
        signal will also be emitted, with information about the e-mails.
        The protocol does not keep track of any of this information.
      </p>

    </tp:docstring>
  </interface>
</node>
<!-- vim:set sw=2 sts=2 et ft=xml: -->

